{
  "api/RegexBuilder.CommonPatterns.html": {
    "href": "api/RegexBuilder.CommonPatterns.html",
    "title": "Class CommonPatterns | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class CommonPatterns Namespace RegexBuilder Assembly RegexBuilder.dll Provides factory methods for commonly used regex patterns. public static class CommonPatterns Inheritance object CommonPatterns Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Email() Returns a RegexNode that matches a basic email address pattern. Pattern matches: localpart@domain.tld Local part: alphanumeric characters, dots, hyphens, underscores, percent, and plus signs Domain: alphanumeric characters and hyphens, separated by dots TLD: 2-6 alphabetic characters public static RegexNode Email() Returns RegexNode A RegexNode representing an email address pattern. Examples var regex = RegexBuilder.Build(CommonPatterns.Email()); bool isValid = regex.IsMatch(\"user@example.com\"); // true Url() Returns a RegexNode that matches a URL pattern. Pattern matches URLs with optional protocol, domain, and path. Protocol: http://, https://, or ftp:// (optional) Domain: standard domain format with optional port Path: optional path, query string, and fragment public static RegexNode Url() Returns RegexNode A RegexNode representing a URL pattern. Examples var regex = RegexBuilder.Build(CommonPatterns.Url()); bool isValid = regex.IsMatch(\"https://example.com/path\"); // true"
  },
  "api/RegexBuilder.ExtensionMethods.html": {
    "href": "api/RegexBuilder.ExtensionMethods.html",
    "title": "Class ExtensionMethods | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class ExtensionMethods Namespace RegexBuilder Assembly RegexBuilder.dll public static class ExtensionMethods Inheritance object ExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReplaceMany(StringBuilder, string[], string[]) public static void ReplaceMany(this StringBuilder builder, string[] oldValues, string[] newValues) Parameters builder StringBuilder oldValues string[] newValues string[]"
  },
  "api/RegexBuilder.PatternBuilder.html": {
    "href": "api/RegexBuilder.PatternBuilder.html",
    "title": "Class PatternBuilder | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class PatternBuilder Namespace RegexBuilder Assembly RegexBuilder.dll Provides a fluent API for building complex regex patterns with method chaining. public class PatternBuilder Inheritance object PatternBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PatternBuilder() Initializes a new instance of the PatternBuilder class. public PatternBuilder() Methods AnyCharacter(int?, int?) Adds any character pattern (.) with optional quantifiers. public PatternBuilder AnyCharacter(int? min = null, int? max = null) Parameters min int? Minimum number of any characters (null for exactly one). max int? Maximum number of any characters (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining. Build() Builds and returns the final RegexNode representing the complete pattern. public RegexNode Build() Returns RegexNode A RegexNode representing the built pattern, or null if no pattern was defined. CharacterSet(string, int?, int?) Adds a character set pattern with optional quantifiers. public PatternBuilder CharacterSet(string characterSet, int? min = null, int? max = null) Parameters characterSet string The character set definition (e.g., \"0-9a-f\" for hex digits). min int? Minimum occurrences (null for exactly one). max int? Maximum occurrences (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining. Digits(int?, int?) Adds a digit pattern (\\d) with optional quantifiers. public PatternBuilder Digits(int? min = null, int? max = null) Parameters min int? Minimum number of digits (null for exactly one). max int? Maximum number of digits (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining. Email() Adds the common email pattern to the builder. public PatternBuilder Email() Returns PatternBuilder The current PatternBuilder instance for method chaining. End() Adds an end-of-line anchor ($) to the pattern. public PatternBuilder End() Returns PatternBuilder The current PatternBuilder instance for method chaining. Group(Action<PatternBuilder>) Adds a capturing group to the pattern using a builder action. public PatternBuilder Group(Action<PatternBuilder> builderAction) Parameters builderAction Action<PatternBuilder> Action that defines the group's content. Returns PatternBuilder The current PatternBuilder instance for method chaining. Letters(int?, int?) Adds a letter pattern ([a-zA-Z]) with optional quantifiers. public PatternBuilder Letters(int? min = null, int? max = null) Parameters min int? Minimum number of letters (null for exactly one). max int? Maximum number of letters (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining. Literal(string) Adds a literal string to the pattern. public PatternBuilder Literal(string text) Parameters text string The literal text to match. Returns PatternBuilder The current PatternBuilder instance for method chaining. NonCapturingGroup(Action<PatternBuilder>) Adds a non-capturing group to the pattern using a builder action. public PatternBuilder NonCapturingGroup(Action<PatternBuilder> builderAction) Parameters builderAction Action<PatternBuilder> Action that defines the group's content. Returns PatternBuilder The current PatternBuilder instance for method chaining. Optional(Action<PatternBuilder>) Makes the previous pattern optional (adds ? quantifier). public PatternBuilder Optional(Action<PatternBuilder> builderAction) Parameters builderAction Action<PatternBuilder> Action that defines the optional content. Returns PatternBuilder The current PatternBuilder instance for method chaining. Or(RegexNode) Adds an alternation (OR) pattern using an existing RegexNode. public PatternBuilder Or(RegexNode node) Parameters node RegexNode The alternative pattern node. Returns PatternBuilder The current PatternBuilder instance for method chaining. Or(Action<PatternBuilder>) Adds an alternation (OR) pattern using a builder action. public PatternBuilder Or(Action<PatternBuilder> builderAction) Parameters builderAction Action<PatternBuilder> Action that defines the alternative branch. Returns PatternBuilder The current PatternBuilder instance for method chaining. Pattern(RegexNode) Adds an existing RegexNode to the pattern. public PatternBuilder Pattern(RegexNode node) Parameters node RegexNode The RegexNode to add. Returns PatternBuilder The current PatternBuilder instance for method chaining. Start() Adds a start-of-line anchor (^) to the pattern. public PatternBuilder Start() Returns PatternBuilder The current PatternBuilder instance for method chaining. Url() Adds the common URL pattern to the builder. public PatternBuilder Url() Returns PatternBuilder The current PatternBuilder instance for method chaining. Whitespace(int?, int?) Adds a whitespace pattern (\\s) with optional quantifiers. public PatternBuilder Whitespace(int? min = null, int? max = null) Parameters min int? Minimum number of whitespace characters (null for exactly one). max int? Maximum number of whitespace characters (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining. WordCharacter(int?, int?) Adds a word character pattern (\\w) with optional quantifiers. public PatternBuilder WordCharacter(int? min = null, int? max = null) Parameters min int? Minimum number of word characters (null for exactly one). max int? Maximum number of word characters (null for exactly min, or unbounded if min is set). Returns PatternBuilder The current PatternBuilder instance for method chaining."
  },
  "api/RegexBuilder.RegexBuilder.html": {
    "href": "api/RegexBuilder.RegexBuilder.html",
    "title": "Class RegexBuilder | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexBuilder Namespace RegexBuilder Assembly RegexBuilder.dll public static class RegexBuilder Inheritance object RegexBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Alternate(RegexNode, RegexNode) Generates an alternation expression with two options (\"a|b\"). public static RegexNodeAlternation Alternate(RegexNode expression1, RegexNode expression2) Parameters expression1 RegexNode First option. expression2 RegexNode Second option. Returns RegexNodeAlternation An instance of RegexNode containing the alternation expression. Alternate(RegexNode, RegexNode, RegexQuantifier) Generates an alternation expression with two options (\"a|b\"). public static RegexNodeAlternation Alternate(RegexNode expression1, RegexNode expression2, RegexQuantifier quantifier) Parameters expression1 RegexNode First option. expression2 RegexNode Second option. quantifier RegexQuantifier Node quantifier. Returns RegexNodeAlternation An instance of RegexNode containing the alternation expression. Alternate(RegexNode[]) Generates an alternation expression with two or more options (\"a|b|c|...\"). public static RegexNodeAlternation Alternate(RegexNode[] expressions) Parameters expressions RegexNode[] Array of option expressions. Returns RegexNodeAlternation An instance of RegexNode containing the alternation expression. Alternate(RegexNode[], RegexQuantifier) Generates an alternation expression with two or more options (\"a|b|c|...\"). public static RegexNodeAlternation Alternate(RegexNode[] expressions, RegexQuantifier quantifier) Parameters expressions RegexNode[] Array of option expressions. quantifier RegexQuantifier Node quantifier. Returns RegexNodeAlternation An instance of RegexNode containing the alternation expression. AsciiCharacter(byte) Generates an ASCII character pattern (\"\\xNN\") with the specified character code. public static RegexNodeLiteral AsciiCharacter(byte code) Parameters code byte ASCII character code. Returns RegexNodeLiteral An instance of RegexNode containing the specified ASCII character. AsciiCharacter(byte, RegexQuantifier) Generates an ASCII character pattern (\"\\xNN\") with the specified character code. public static RegexNodeLiteral AsciiCharacter(byte code, RegexQuantifier quantifier) Parameters code byte ASCII character code. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the specified ASCII character. BacktrackingSuppression(RegexNode) Generates a subexpression with disabled backtracking (\"(?>expression)\"). public static RegexNodeBacktrackingSuppression BacktrackingSuppression(RegexNode innerExpression) Parameters innerExpression RegexNode Inner expression. Returns RegexNodeBacktrackingSuppression An instance of RegexNode containing the expression with suppressed backtracking. BacktrackingSuppression(RegexNode, RegexQuantifier) Generates a subexpression with disabled backtracking (\"(?>expression)\"). public static RegexNodeBacktrackingSuppression BacktrackingSuppression(RegexNode innerExpression, RegexQuantifier quantifier) Parameters innerExpression RegexNode Inner expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeBacktrackingSuppression An instance of RegexNode containing the expression with suppressed backtracking. BalancingGroup(string, string, RegexNode) Generates a balancing group that pushes to one named stack and pops from another. Used for matching nested/balanced constructs like parentheses, XML tags, or code blocks. Syntax: (?<name1-name2>expr) public static RegexNodeBalancingGroup BalancingGroup(string pushGroupName, string popGroupName, RegexNode innerExpression) Parameters pushGroupName string Name of group to push matched text onto. popGroupName string Name of group to pop from stack. innerExpression RegexNode The inner expression to match. Returns RegexNodeBalancingGroup An instance of RegexNode containing the balancing group. BalancingGroup(string, string, RegexNode, RegexQuantifier) Generates a balancing group that pushes to one named stack and pops from another, with a quantifier. Used for matching nested/balanced constructs like parentheses, XML tags, or code blocks. Syntax: (?<name1-name2>expr) public static RegexNodeBalancingGroup BalancingGroup(string pushGroupName, string popGroupName, RegexNode innerExpression, RegexQuantifier quantifier) Parameters pushGroupName string Name of group to push matched text onto. popGroupName string Name of group to pop from stack. innerExpression RegexNode The inner expression to match. quantifier RegexQuantifier Node quantifier. Returns RegexNodeBalancingGroup An instance of RegexNode containing the balancing group. BellCharacter() Generates a bell character (alert) escape sequence (\"\\a\", ASCII 7). public static RegexNodeLiteral BellCharacter() Returns RegexNodeLiteral An instance of RegexNode containing the bell character escape. BellCharacter(RegexQuantifier) Generates a bell character (alert) escape sequence (\"\\a\", ASCII 7) with a quantifier. public static RegexNodeLiteral BellCharacter(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the bell character escape. Build(RegexNode) Generates a Regex object from a single RegexNode. public static Regex Build(RegexNode rootNode) Parameters rootNode RegexNode Root node. Returns Regex A new instance of Regex which corresponds to the specified RegexNode. Build(params RegexNode[]) Generates a Regex object from a list of RegexNodes. public static Regex Build(params RegexNode[] regexNodes) Parameters regexNodes RegexNode[] Top-level nodes for the Regex. Returns Regex A new instance of Regex which corresponds to the specified RegexNode list. Build(RegexOptions, RegexNode) Generates a Regex object from a single RegexNode and applies a combination of RegexOptions to it. public static Regex Build(RegexOptions regexOptions, RegexNode rootNode) Parameters regexOptions RegexOptions Combination of RegexOption flags to be applied to the Regex. rootNode RegexNode Root node. Returns Regex A new instance of Regex which corresponds to the specified RegexNode. Build(RegexOptions, params RegexNode[]) Generates a Regex object from a list of RegexNode and applies a combination of RegexOptions to it. public static Regex Build(RegexOptions regexOptions, params RegexNode[] regexNodes) Parameters regexOptions RegexOptions Combination of RegexOption flags to be applied to the Regex. regexNodes RegexNode[] Top-level nodes for the Regex. Returns Regex A new instance of Regex which corresponds to the specified RegexNode list. CharacterRange(char, char, bool, RegexQuantifier) Generates a character range expression (\"[a-z]\") with the specified start/end characters. public static RegexNodeCharacterRange CharacterRange(char rangeStart, char rangeEnd, bool useCharacterCodes, RegexQuantifier quantifier) Parameters rangeStart char First character in the range. rangeEnd char Last character in the range. useCharacterCodes bool True - encode every character with \"\\uNNNN\" pattern. False - use every character explicitly. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterRange An instance of RegexNode containing the character range. CharacterSet(char[], bool, RegexQuantifier) Generates a character set expression (\"[abc]\") from the specified character array. public static RegexNodeCharacterSet CharacterSet(char[] characters, bool useCharacterCodes, RegexQuantifier quantifier) Parameters characters char[] An array of allowed characters. useCharacterCodes bool True - encode every character with \"\\uNNNN\" pattern. False - use every character explicitly. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterSet CharacterSet(string, RegexQuantifier) Generates a character set expression (\"[abc]\") using a preformatted character string. public static RegexNodeCharacterSet CharacterSet(string characters, RegexQuantifier quantifier) Parameters characters string Character set description. Special characters will be automatically escaped. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterSet An instance of RegexNode containing the character set. Comment(string) Generates an inline Regex comment (\"(?#text)\"). public static RegexNodeComment Comment(string commentText) Parameters commentText string Comment text. Returns RegexNodeComment An instance of RegexNode containing the specified comment. Concatenate(RegexNode, RegexNode) Concatenates two nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2) Parameters node1 RegexNode First node. node2 RegexNode Second node. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode, RegexNode, RegexNode) Concatenates three nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2, RegexNode node3) Parameters node1 RegexNode First node. node2 RegexNode Second node. node3 RegexNode Third node. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode, RegexNode, RegexNode, RegexNode) Concatenates four nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2, RegexNode node3, RegexNode node4) Parameters node1 RegexNode First node. node2 RegexNode Second node. node3 RegexNode Third node. node4 RegexNode Fourth node. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode, RegexNode, RegexNode, RegexNode, RegexQuantifier) Concatenates four nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2, RegexNode node3, RegexNode node4, RegexQuantifier quantifier) Parameters node1 RegexNode First node. node2 RegexNode Second node. node3 RegexNode Third node. node4 RegexNode Fourth node. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode, RegexNode, RegexNode, RegexQuantifier) Concatenates three nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2, RegexNode node3, RegexQuantifier quantifier) Parameters node1 RegexNode First node. node2 RegexNode Second node. node3 RegexNode Third node. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode, RegexNode, RegexQuantifier) Concatenates two nodes. public static RegexNodeConcatenation Concatenate(RegexNode node1, RegexNode node2, RegexQuantifier quantifier) Parameters node1 RegexNode First node. node2 RegexNode Second node. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode[]) Concatenates an array of nodes. public static RegexNodeConcatenation Concatenate(RegexNode[] expressions) Parameters expressions RegexNode[] Nodes to concatenate. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. Concatenate(RegexNode[], RegexQuantifier) Concatenates an array of nodes. public static RegexNodeConcatenation Concatenate(RegexNode[] expressions, RegexQuantifier quantifier) Parameters expressions RegexNode[] Nodes to concatenate. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConcatenation An instance of RegexNode representing the concatenation of child nodes. ConditionalMatch(RegexNode, RegexNode, RegexNode) Generates a conditional match expression (\"(?(condition)|(true)|(false))\"). public static RegexNodeConditionalMatch ConditionalMatch(RegexNode conditionExpression, RegexNode trueMatchExpression, RegexNode falseMatchExpression) Parameters conditionExpression RegexNode Condition expression. trueMatchExpression RegexNode True match expression. falseMatchExpression RegexNode False match expression. Returns RegexNodeConditionalMatch An instance of RegexNode containing the conditional match expression. ConditionalMatch(RegexNode, RegexNode, RegexNode, RegexQuantifier) Generates a conditional match expression (\"(?(condition)|(true)|(false))\"). public static RegexNodeConditionalMatch ConditionalMatch(RegexNode conditionExpression, RegexNode trueMatchExpression, RegexNode falseMatchExpression, RegexQuantifier quantifier) Parameters conditionExpression RegexNode Condition expression. trueMatchExpression RegexNode True match expression. falseMatchExpression RegexNode False match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConditionalMatch An instance of RegexNode containing the conditional match expression. ConditionalMatch(string, RegexNode, RegexNode) Generates a conditional match expression which uses a named group for condition evaluation (\"(?(GroupName)|(true)|(false))\"). public static RegexNodeConditionalMatch ConditionalMatch(string conditionGroupName, RegexNode trueMatchExpression, RegexNode falseMatchExpression) Parameters conditionGroupName string The name of the group to be used as a condition. trueMatchExpression RegexNode True match expression. falseMatchExpression RegexNode False match expression. Returns RegexNodeConditionalMatch An instance of RegexNode containing the conditional match expression. ConditionalMatch(string, RegexNode, RegexNode, RegexQuantifier) Generates a conditional match expression which uses a named group for condition evaluation (\"(?(GroupName)|(true)|(false))\"). public static RegexNodeConditionalMatch ConditionalMatch(string conditionGroupName, RegexNode trueMatchExpression, RegexNode falseMatchExpression, RegexQuantifier quantifier) Parameters conditionGroupName string The name of the group to be used as a condition. trueMatchExpression RegexNode True match expression. falseMatchExpression RegexNode False match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeConditionalMatch An instance of RegexNode containing the conditional match expression. Digit() Generates a digit character class (\"\\d\"). public static RegexNodeLiteral Digit() Returns RegexNodeLiteral An instance of RegexNode containing the digit character class. Digit(RegexQuantifier) Generates a digit character class (\"\\d\") with a quantifier. public static RegexNodeLiteral Digit(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the digit character class. EscapeCharacter() Generates an escape character escape sequence (\"\\e\", ASCII 27). public static RegexNodeLiteral EscapeCharacter() Returns RegexNodeLiteral An instance of RegexNode containing the escape character escape. EscapeCharacter(RegexQuantifier) Generates an escape character escape sequence (\"\\e\", ASCII 27) with a quantifier. public static RegexNodeLiteral EscapeCharacter(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the escape character escape. FormFeed() Generates a form feed character escape sequence (\"\\f\", ASCII 12). public static RegexNodeLiteral FormFeed() Returns RegexNodeLiteral An instance of RegexNode containing the form feed character escape. FormFeed(RegexQuantifier) Generates a form feed character escape sequence (\"\\f\", ASCII 12) with a quantifier. public static RegexNodeLiteral FormFeed(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the form feed character escape. Group(RegexNode) Generates an unnamed capturing group with the specified subexpression. public static RegexNodeGroup Group(RegexNode matchExpression) Parameters matchExpression RegexNode Inner expression. Returns RegexNodeGroup An instance of RegexNode containing the unnamed capturing group. Group(RegexNode, RegexQuantifier) Generates an unnamed capturing group with the specified subexpression. public static RegexNodeGroup Group(RegexNode matchExpression, RegexQuantifier quantifier) Parameters matchExpression RegexNode Inner expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroup An instance of RegexNode containing the unnamed capturing group. Group(string, RegexNode) Generates a named capturing group with the specified subexpression. public static RegexNodeGroup Group(string groupName, RegexNode matchExpression) Parameters groupName string Group name. matchExpression RegexNode Inner expression. Returns RegexNodeGroup An instance of RegexNode containing the named capturing group. Group(string, RegexNode, RegexQuantifier) Generates a named capturing group with the specified subexpression. public static RegexNodeGroup Group(string groupName, RegexNode matchExpression, RegexQuantifier quantifier) Parameters groupName string Group name. matchExpression RegexNode Inner expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroup An instance of RegexNode containing the named capturing group. GroupApostrophe(string, RegexNode) Generates a named capturing group using apostrophe syntax for VBScript compatibility. Syntax: (?'name'expr) public static RegexNodeGroup GroupApostrophe(string groupName, RegexNode matchExpression) Parameters groupName string Group name. matchExpression RegexNode Inner expression. Returns RegexNodeGroup An instance of RegexNode containing the named capturing group with apostrophe syntax. GroupApostrophe(string, RegexNode, RegexQuantifier) Generates a named capturing group using apostrophe syntax for VBScript compatibility. Syntax: (?'name'expr) public static RegexNodeGroup GroupApostrophe(string groupName, RegexNode matchExpression, RegexQuantifier quantifier) Parameters groupName string Group name. matchExpression RegexNode Inner expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroup An instance of RegexNode containing the named capturing group with apostrophe syntax. GroupBackReference(int, RegexQuantifier) Generates a backreference to the group with the specified index (\"\\N\"). public static RegexNodeGroupReference GroupBackReference(int groupIndex, RegexQuantifier quantifier) Parameters groupIndex int Group ordinal number. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroupReference An instance of RegexNode containing the group reference. GroupBackReference(string) Generates a backreference to a named group (\"\\k<GroupName>\"). public static RegexNodeGroupReference GroupBackReference(string groupName) Parameters groupName string Group name. Returns RegexNodeGroupReference An instance of RegexNode containing the group reference. GroupBackReference(string, RegexQuantifier) Generates a backreference to a named group (\"\\k<GroupName>\"). public static RegexNodeGroupReference GroupBackReference(string groupName, RegexQuantifier quantifier) Parameters groupName string Group name. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroupReference An instance of RegexNode containing the group reference. InlineOptionGrouping(RegexOptions, RegexNode) Generates an inline option grouping with enabled options (\"(?i:expr)\", \"(?im:expr)\", etc.). public static RegexNodeInlineOptionGrouping InlineOptionGrouping(RegexOptions enabledOptions, RegexNode expression) Parameters enabledOptions RegexOptions Options to enable for the expression. expression RegexNode Inner expression. Returns RegexNodeInlineOptionGrouping An instance of RegexNode containing the inline option grouping. InlineOptionGrouping(RegexOptions, RegexOptions, RegexNode) Generates an inline option grouping with enabled and disabled options (\"(?i-m:expr)\", etc.). public static RegexNodeInlineOptionGrouping InlineOptionGrouping(RegexOptions enabledOptions, RegexOptions disabledOptions, RegexNode expression) Parameters enabledOptions RegexOptions Options to enable for the expression. disabledOptions RegexOptions Options to disable for the expression. expression RegexNode Inner expression. Returns RegexNodeInlineOptionGrouping An instance of RegexNode containing the inline option grouping. LineEnd() Generates a line end anchor (\"$\"). public static RegexNodeLiteral LineEnd() Returns RegexNodeLiteral An instance of RegexNode containing the line end anchor. LineStart() Generates a line start anchor (\"^\"). public static RegexNodeLiteral LineStart() Returns RegexNodeLiteral An instance of RegexNode containing the line start anchor. Literal(string) Generates a simple string literal with automatic character escaping. public static RegexNodeEscapingLiteral Literal(string value) Parameters value string Node text. Special characters will be automatically escaped. Returns RegexNodeEscapingLiteral An instance of RegexNode containing the specified text. Literal(string, RegexQuantifier) Generates a simple string literal with automatic character escaping. public static RegexNodeEscapingLiteral Literal(string value, RegexQuantifier quantifier) Parameters value string Node text. Special characters will be automatically escaped. quantifier RegexQuantifier Node quantifier. Returns RegexNodeEscapingLiteral An instance of RegexNode containing the specified text. MatchPointAnchor() Generates a match point anchor (\"\\G\"), which matches at the position of the previous match. public static RegexNodeLiteral MatchPointAnchor() Returns RegexNodeLiteral An instance of RegexNode containing the match point anchor. MetaCharacter(string) Generates a Regex metacharacter, such as \\d, \\w or \\s. Many metacharacter constants are available in RegexMetaChars class. public static RegexNodeLiteral MetaCharacter(string characterPattern) Parameters characterPattern string Metacharacter pattern. Returns RegexNodeLiteral An instance of RegexNode containing the specified metacharacter. MetaCharacter(string, RegexQuantifier) Generates a Regex metacharacter, such as \\d, \\w or \\s. Many metacharacter constants are available in RegexMetaChars class. public static RegexNodeLiteral MetaCharacter(string characterPattern, RegexQuantifier quantifier) Parameters characterPattern string Metacharacter pattern. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the specified metacharacter. NegativeCharacterRange(char, char, bool, RegexQuantifier) Generates a negative character range expression (\"[^a-z]\") with the specified start/end characters. public static RegexNodeCharacterRange NegativeCharacterRange(char rangeStart, char rangeEnd, bool useCharacterCodes, RegexQuantifier quantifier) Parameters rangeStart char First character in the range. rangeEnd char Last character in the range. useCharacterCodes bool True - encode every character with \"\\uNNNN\" pattern. False - use every character explicitly. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterRange An instance of RegexNode containing the character range. NegativeCharacterSet(char[], bool, RegexQuantifier) Generates a negative character set expression (\"[^abc]\") from the specified character array. public static RegexNodeCharacterSet NegativeCharacterSet(char[] characters, bool useCharacterCodes, RegexQuantifier quantifier) Parameters characters char[] An array of allowed characters. useCharacterCodes bool True - encode every character with \"\\uNNNN\" pattern. False - use every character explicitly. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterSet NegativeCharacterSet(string, RegexQuantifier) Generates a negative character set expression (\"[^abc]\") using a preformatted character string. public static RegexNodeCharacterSet NegativeCharacterSet(string characters, RegexQuantifier quantifier) Parameters characters string Character set description. Special characters will be automatically escaped. quantifier RegexQuantifier Node quantifier. Returns RegexNodeCharacterSet An instance of RegexNode containing the character set. NegativeLookAhead(RegexNode, RegexNode) Generates a zero-width negative lookahead assertion (\"match(?!lookahead)\"). public static RegexNodeLookAround NegativeLookAhead(RegexNode lookupExpression, RegexNode matchExpression) Parameters lookupExpression RegexNode Lookahead expression. matchExpression RegexNode Match expression. Returns RegexNodeLookAround An instance of RegexNode containing the negative lookahead assertion. NegativeLookAhead(RegexNode, RegexNode, RegexQuantifier) Generates a zero-width negative lookahead assertion (\"match(?!lookahead)\"). public static RegexNodeLookAround NegativeLookAhead(RegexNode lookupExpression, RegexNode matchExpression, RegexQuantifier quantifier) Parameters lookupExpression RegexNode Lookahead expression. matchExpression RegexNode Match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLookAround An instance of RegexNode containing the negative lookahead assertion. NegativeLookBehind(RegexNode, RegexNode) Generates a zero-width negative lookbehind assertion (\"(?<!lookbehind)match\"). public static RegexNodeLookAround NegativeLookBehind(RegexNode lookupExpression, RegexNode matchExpression) Parameters lookupExpression RegexNode Lookbehind expression. matchExpression RegexNode Match expression. Returns RegexNodeLookAround An instance of RegexNode containing the negative lookbehind assertion. NegativeLookBehind(RegexNode, RegexNode, RegexQuantifier) Generates a zero-width negative lookbehind assertion (\"(?<!lookbehind)match\"). public static RegexNodeLookAround NegativeLookBehind(RegexNode lookupExpression, RegexNode matchExpression, RegexQuantifier quantifier) Parameters lookupExpression RegexNode Lookbehind expression. matchExpression RegexNode Match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLookAround An instance of RegexNode containing the negative lookbehind assertion. NegativeUnicodeCategory(string) Generates a negated Unicode category escape sequence (\"\\P{name}\") for matching characters NOT in a Unicode category. public static RegexNodeUnicodeCategory NegativeUnicodeCategory(string categoryName) Parameters categoryName string The Unicode category name (e.g., \"L\", \"N\", \"IsCyrillic\"). Returns RegexNodeUnicodeCategory An instance of RegexNode containing the negated Unicode category escape. NegativeUnicodeCategory(string, RegexQuantifier) Generates a negated Unicode category escape sequence (\"\\P{name}\") for matching characters NOT in a Unicode category with a quantifier. public static RegexNodeUnicodeCategory NegativeUnicodeCategory(string categoryName, RegexQuantifier quantifier) Parameters categoryName string The Unicode category name (e.g., \"L\", \"N\", \"IsCyrillic\"). quantifier RegexQuantifier Node quantifier. Returns RegexNodeUnicodeCategory An instance of RegexNode containing the negated Unicode category escape. NonCapturingGroup(RegexNode) Generates a non-capturing group with the specified subexpression. public static RegexNodeGroup NonCapturingGroup(RegexNode matchExpression) Parameters matchExpression RegexNode Inner expression. Returns RegexNodeGroup An instance of RegexNode containing the non-capturing group. NonCapturingGroup(RegexNode, RegexQuantifier) Generates a non-capturing group with the specified subexpression. public static RegexNodeGroup NonCapturingGroup(RegexNode matchExpression, RegexQuantifier quantifier) Parameters matchExpression RegexNode Inner expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeGroup An instance of RegexNode containing the non-capturing group. NonDigit() Generates a non-digit character class (\"\\D\"). public static RegexNodeLiteral NonDigit() Returns RegexNodeLiteral An instance of RegexNode containing the non-digit character class. NonDigit(RegexQuantifier) Generates a non-digit character class (\"\\D\") with a quantifier. public static RegexNodeLiteral NonDigit(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the non-digit character class. NonEscapedLiteral(string) Generates a simple string literal \"as is\", without character escaping. This method can be used to render explicit preformatted patterns of the Regex or some rare constructions not supported by RegexBuilder. public static RegexNodeLiteral NonEscapedLiteral(string value) Parameters value string Node text. Returns RegexNodeLiteral An instance of RegexNode containing the specified text. NonEscapedLiteral(string, RegexQuantifier) Generates a simple string literal \"as is\", without character escaping. This method can be used to render explicit preformatted patterns of the Regex or some rare constructions not supported by RegexBuilder. public static RegexNodeLiteral NonEscapedLiteral(string value, RegexQuantifier quantifier) Parameters value string Node text. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the specified text. NonWhitespace() Generates a non-whitespace character class (\"\\S\"). public static RegexNodeLiteral NonWhitespace() Returns RegexNodeLiteral An instance of RegexNode containing the non-whitespace character class. NonWhitespace(RegexQuantifier) Generates a non-whitespace character class (\"\\S\") with a quantifier. public static RegexNodeLiteral NonWhitespace(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the non-whitespace character class. NonWordBoundary() Generates a non-word boundary anchor (\"\\B\"). public static RegexNodeLiteral NonWordBoundary() Returns RegexNodeLiteral An instance of RegexNode containing the non-word boundary anchor. NonWordCharacter() Generates a non-word character class (\"\\W\"). public static RegexNodeLiteral NonWordCharacter() Returns RegexNodeLiteral An instance of RegexNode containing the non-word character class. NonWordCharacter(RegexQuantifier) Generates a non-word character class (\"\\W\") with a quantifier. public static RegexNodeLiteral NonWordCharacter(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the non-word character class. OctalCharacter(int) Generates an octal character escape sequence (\"\\NNN\") with the specified octal value. public static RegexNodeLiteral OctalCharacter(int octalValue) Parameters octalValue int Octal value (0-377 for 0-255 decimal). Returns RegexNodeLiteral An instance of RegexNode containing the octal character escape. OctalCharacter(int, RegexQuantifier) Generates an octal character escape sequence (\"\\NNN\") with the specified octal value and quantifier. public static RegexNodeLiteral OctalCharacter(int octalValue, RegexQuantifier quantifier) Parameters octalValue int Octal value (0-377 for 0-255 decimal). quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the octal character escape. Pattern() Creates a new PatternBuilder instance for building complex regex patterns using a fluent API. public static PatternBuilder Pattern() Returns PatternBuilder A new PatternBuilder instance. PositiveLookAhead(RegexNode, RegexNode) Generates a zero-width positive lookahead assertion (\"match(?=lookahead)\"). public static RegexNodeLookAround PositiveLookAhead(RegexNode lookupExpression, RegexNode matchExpression) Parameters lookupExpression RegexNode Lookahead expression. matchExpression RegexNode Match expression. Returns RegexNodeLookAround An instance of RegexNode containing the positive lookahead assertion. PositiveLookAhead(RegexNode, RegexNode, RegexQuantifier) Generates a zero-width positive lookahead assertion (\"match(?=lookahead)\"). public static RegexNodeLookAround PositiveLookAhead(RegexNode lookupExpression, RegexNode matchExpression, RegexQuantifier quantifier) Parameters lookupExpression RegexNode Lookahead expression. matchExpression RegexNode Match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLookAround An instance of RegexNode containing the positive lookahead assertion. PositiveLookBehind(RegexNode, RegexNode) Generates a zero-width positive lookbehind assertion (\"(?<=lookbehind)match\"). public static RegexNodeLookAround PositiveLookBehind(RegexNode lookupExpression, RegexNode matchExpression) Parameters lookupExpression RegexNode Lookbehind expression. matchExpression RegexNode Match expression. Returns RegexNodeLookAround An instance of RegexNode containing the positive lookbehind assertion. PositiveLookBehind(RegexNode, RegexNode, RegexQuantifier) Generates a zero-width positive lookbehind assertion (\"(?<=lookbehind)match\"). public static RegexNodeLookAround PositiveLookBehind(RegexNode lookupExpression, RegexNode matchExpression, RegexQuantifier quantifier) Parameters lookupExpression RegexNode Lookbehind expression. matchExpression RegexNode Match expression. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLookAround An instance of RegexNode containing the positive lookbehind assertion. SimpleBalancingGroup(string, RegexNode) Generates a simple balancing group that only uses one stack. Used for matching nested/balanced constructs like parentheses, XML tags, or code blocks. Syntax: (?<name>-expr) public static RegexNodeBalancingGroup SimpleBalancingGroup(string groupName, RegexNode innerExpression) Parameters groupName string Name of group to push onto the stack. innerExpression RegexNode The inner expression to match. Returns RegexNodeBalancingGroup An instance of RegexNode containing the simple balancing group. SimpleBalancingGroup(string, RegexNode, RegexQuantifier) Generates a simple balancing group that only uses one stack, with a quantifier. Used for matching nested/balanced constructs like parentheses, XML tags, or code blocks. Syntax: (?<name>-expr) public static RegexNodeBalancingGroup SimpleBalancingGroup(string groupName, RegexNode innerExpression, RegexQuantifier quantifier) Parameters groupName string Name of group to push onto the stack. innerExpression RegexNode The inner expression to match. quantifier RegexQuantifier Node quantifier. Returns RegexNodeBalancingGroup An instance of RegexNode containing the simple balancing group. StringEnd() Generates a string end anchor (\"\\Z\"). public static RegexNodeLiteral StringEnd() Returns RegexNodeLiteral An instance of RegexNode containing the string end anchor. StringEndAbsolute() Generates an absolute string end anchor (\"\\z\"). public static RegexNodeLiteral StringEndAbsolute() Returns RegexNodeLiteral An instance of RegexNode containing the absolute string end anchor. StringStart() Generates a string start anchor (\"\\A\"). public static RegexNodeLiteral StringStart() Returns RegexNodeLiteral An instance of RegexNode containing the string start anchor. UnicodeCategory(string) Generates a Unicode category escape sequence (\"\\p{name}\") for matching Unicode character categories. public static RegexNodeUnicodeCategory UnicodeCategory(string categoryName) Parameters categoryName string The Unicode category name (e.g., \"L\", \"N\", \"IsCyrillic\"). Returns RegexNodeUnicodeCategory An instance of RegexNode containing the Unicode category escape. UnicodeCategory(string, RegexQuantifier) Generates a Unicode category escape sequence (\"\\p{name}\") for matching Unicode character categories with a quantifier. public static RegexNodeUnicodeCategory UnicodeCategory(string categoryName, RegexQuantifier quantifier) Parameters categoryName string The Unicode category name (e.g., \"L\", \"N\", \"IsCyrillic\"). quantifier RegexQuantifier Node quantifier. Returns RegexNodeUnicodeCategory An instance of RegexNode containing the Unicode category escape. UnicodeCharacter(int) Generates a Unicode character pattern (\"\\uNNNN\") with the specified character code. public static RegexNodeLiteral UnicodeCharacter(int code) Parameters code int Unicode character code. Returns RegexNodeLiteral An instance of RegexNode containing the specified Unicode character. UnicodeCharacter(int, RegexQuantifier) Generates a Unicode character pattern (\"\\uNNNN\") with the specified character code. public static RegexNodeLiteral UnicodeCharacter(int code, RegexQuantifier quantifier) Parameters code int Unicode character code. quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the specified Unicode character. VerticalTab() Generates a vertical tab character escape sequence (\"\\v\", ASCII 11). public static RegexNodeLiteral VerticalTab() Returns RegexNodeLiteral An instance of RegexNode containing the vertical tab character escape. VerticalTab(RegexQuantifier) Generates a vertical tab character escape sequence (\"\\v\", ASCII 11) with a quantifier. public static RegexNodeLiteral VerticalTab(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the vertical tab character escape. Whitespace() Generates a whitespace character class (\"\\s\"). public static RegexNodeLiteral Whitespace() Returns RegexNodeLiteral An instance of RegexNode containing the whitespace character class. Whitespace(RegexQuantifier) Generates a whitespace character class (\"\\s\") with a quantifier. public static RegexNodeLiteral Whitespace(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the whitespace character class. WordBoundary() Generates a word boundary anchor (\"\\b\"). public static RegexNodeLiteral WordBoundary() Returns RegexNodeLiteral An instance of RegexNode containing the word boundary anchor. WordCharacter() Generates a word character class (\"\\w\"). public static RegexNodeLiteral WordCharacter() Returns RegexNodeLiteral An instance of RegexNode containing the word character class. WordCharacter(RegexQuantifier) Generates a word character class (\"\\w\") with a quantifier. public static RegexNodeLiteral WordCharacter(RegexQuantifier quantifier) Parameters quantifier RegexQuantifier Node quantifier. Returns RegexNodeLiteral An instance of RegexNode containing the word character class."
  },
  "api/RegexBuilder.RegexLookAround.html": {
    "href": "api/RegexBuilder.RegexLookAround.html",
    "title": "Enum RegexLookAround | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Enum RegexLookAround Namespace RegexBuilder Assembly RegexBuilder.dll public enum RegexLookAround Fields NegativeLookAhead = 2 NegativeLookBehind = 3 PositiveLookAhead = 0 PositiveLookBehind = 1"
  },
  "api/RegexBuilder.RegexMetaChars.html": {
    "href": "api/RegexBuilder.RegexMetaChars.html",
    "title": "Class RegexMetaChars | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexMetaChars Namespace RegexBuilder Assembly RegexBuilder.dll public static class RegexMetaChars Inheritance object RegexMetaChars Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AnyCharacter public const string AnyCharacter = \".\" Field Value string CarriageReturn public const string CarriageReturn = \"\\\\r\" Field Value string ConsecutiveMatch public const string ConsecutiveMatch = \"\\\\G\" Field Value string Digit public const string Digit = \"\\\\d\" Field Value string Escape public const string Escape = \"\\\\e\" Field Value string FormFeed public const string FormFeed = \"\\\\f\" Field Value string LineEnd public const string LineEnd = \"$\" Field Value string LineStart public const string LineStart = \"^\" Field Value string NewLine public const string NewLine = \"\\\\n\" Field Value string NonDigit public const string NonDigit = \"\\\\D\" Field Value string NonWordBoundary public const string NonWordBoundary = \"\\\\B\" Field Value string NonWordCharacter public const string NonWordCharacter = \"\\\\W\" Field Value string NonwhiteSpace public const string NonwhiteSpace = \"\\\\S\" Field Value string StringEnd public const string StringEnd = \"\\\\Z\" Field Value string StringStart public const string StringStart = \"\\\\A\" Field Value string Tab public const string Tab = \"\\\\t\" Field Value string VerticalTab public const string VerticalTab = \"\\\\v\" Field Value string WhiteSpace public const string WhiteSpace = \"\\\\s\" Field Value string WordBoundary public const string WordBoundary = \"\\\\b\" Field Value string WordCharacter public const string WordCharacter = \"\\\\w\" Field Value string Methods GetGeneralCategories() Gets all supported Unicode general categories. public static IEnumerable<string> GetGeneralCategories() Returns IEnumerable<string> An enumeration of supported Unicode general category names. GetNamedBlocks() Gets all supported Unicode named blocks. public static IEnumerable<string> GetNamedBlocks() Returns IEnumerable<string> An enumeration of supported Unicode named block names. IsValidUnicodeCategory(string) Validates whether a Unicode category name is supported. public static bool IsValidUnicodeCategory(string categoryName) Parameters categoryName string The category name to validate. Returns bool True if the category is supported; otherwise, false."
  },
  "api/RegexBuilder.RegexNode.html": {
    "href": "api/RegexBuilder.RegexNode.html",
    "title": "Class RegexNode | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNode Namespace RegexBuilder Assembly RegexBuilder.dll public abstract class RegexNode Inheritance object RegexNode Derived RegexNodeAlternation RegexNodeBacktrackingSuppression RegexNodeBalancingGroup RegexNodeCharacterRange RegexNodeCharacterSet RegexNodeComment RegexNodeConcatenation RegexNodeConditionalMatch RegexNodeGroup RegexNodeGroupReference RegexNodeInlineOption RegexNodeInlineOptionGrouping RegexNodeLiteral RegexNodeLookAround RegexNodeUnicodeCategory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowQuantifier protected abstract bool AllowQuantifier { get; } Property Value bool HasQuantifier protected bool HasQuantifier { get; } Property Value bool Quantifier Gets or sets a RegexQuantifier associated with this node. public RegexQuantifier Quantifier { get; set; } Property Value RegexQuantifier Methods Add(RegexNode, RegexNode) public static RegexNode Add(RegexNode node1, RegexNode node2) Parameters node1 RegexNode node2 RegexNode Returns RegexNode ToRegexPattern() Converts RegexNode to a Regex pattern string. public abstract string ToRegexPattern() Returns string Operators operator +(RegexNode, RegexNode) public static RegexNode operator +(RegexNode node1, RegexNode node2) Parameters node1 RegexNode node2 RegexNode Returns RegexNode"
  },
  "api/RegexBuilder.RegexNodeAlternation.html": {
    "href": "api/RegexBuilder.RegexNodeAlternation.html",
    "title": "Class RegexNodeAlternation | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeAlternation Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeAlternation : RegexNode Inheritance object RegexNode RegexNodeAlternation Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeAlternation(RegexNode, RegexNode) public RegexNodeAlternation(RegexNode expression1, RegexNode expression2) Parameters expression1 RegexNode expression2 RegexNode RegexNodeAlternation(params RegexNode[]) public RegexNodeAlternation(params RegexNode[] expressions) Parameters expressions RegexNode[] Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool Expressions public IEnumerable<RegexNode> Expressions { get; } Property Value IEnumerable<RegexNode> Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeBacktrackingSuppression.html": {
    "href": "api/RegexBuilder.RegexNodeBacktrackingSuppression.html",
    "title": "Class RegexNodeBacktrackingSuppression | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeBacktrackingSuppression Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeBacktrackingSuppression : RegexNode Inheritance object RegexNode RegexNodeBacktrackingSuppression Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeBacktrackingSuppression(RegexNode) public RegexNodeBacktrackingSuppression(RegexNode innerExpression) Parameters innerExpression RegexNode Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool InnerExpression public RegexNode InnerExpression { get; set; } Property Value RegexNode Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeBalancingGroup.html": {
    "href": "api/RegexBuilder.RegexNodeBalancingGroup.html",
    "title": "Class RegexNodeBalancingGroup | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeBalancingGroup Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeBalancingGroup : RegexNode Inheritance object RegexNode RegexNodeBalancingGroup Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeBalancingGroup(string, RegexNode) public RegexNodeBalancingGroup(string groupName, RegexNode innerExpression) Parameters groupName string innerExpression RegexNode RegexNodeBalancingGroup(string, string, RegexNode) public RegexNodeBalancingGroup(string pushGroupName, string popGroupName, RegexNode innerExpression) Parameters pushGroupName string popGroupName string innerExpression RegexNode Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool InnerExpression Gets or sets the inner expression to match within the balancing group. public RegexNode InnerExpression { get; set; } Property Value RegexNode IsSimpleBalancing public bool IsSimpleBalancing { get; } Property Value bool PopGroupName public string PopGroupName { get; set; } Property Value string PushGroupName public string PushGroupName { get; set; } Property Value string Methods ToRegexPattern() public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeCharacterRange.html": {
    "href": "api/RegexBuilder.RegexNodeCharacterRange.html",
    "title": "Class RegexNodeCharacterRange | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeCharacterRange Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeCharacterRange : RegexNode Inheritance object RegexNode RegexNodeCharacterRange Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeCharacterRange(char, char, bool) public RegexNodeCharacterRange(char rangeStart, char rangeEnd, bool isNegative) Parameters rangeStart char rangeEnd char isNegative bool Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool IsNegative public bool IsNegative { get; set; } Property Value bool RangeEnd public char RangeEnd { get; set; } Property Value char RangeStart public char RangeStart { get; set; } Property Value char UseCharacterCodes public bool UseCharacterCodes { get; set; } Property Value bool Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeCharacterSet.html": {
    "href": "api/RegexBuilder.RegexNodeCharacterSet.html",
    "title": "Class RegexNodeCharacterSet | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeCharacterSet Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeCharacterSet : RegexNode Inheritance object RegexNode RegexNodeCharacterSet Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeCharacterSet(char[], bool) public RegexNodeCharacterSet(char[] characters, bool isNegative) Parameters characters char[] isNegative bool RegexNodeCharacterSet(string, bool) public RegexNodeCharacterSet(string characterListExpression, bool isNegative) Parameters characterListExpression string isNegative bool Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool CharacterListExpression public string CharacterListExpression { get; set; } Property Value string Characters public IEnumerable<char> Characters { get; } Property Value IEnumerable<char> IsNegative public bool IsNegative { get; set; } Property Value bool UseCharacterCodes public bool UseCharacterCodes { get; set; } Property Value bool Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeComment.html": {
    "href": "api/RegexBuilder.RegexNodeComment.html",
    "title": "Class RegexNodeComment | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeComment Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeComment : RegexNode Inheritance object RegexNode RegexNodeComment Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeComment(string) public RegexNodeComment(string commentText) Parameters commentText string Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool CommentText public string CommentText { get; set; } Property Value string Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeConcatenation.html": {
    "href": "api/RegexBuilder.RegexNodeConcatenation.html",
    "title": "Class RegexNodeConcatenation | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeConcatenation Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeConcatenation : RegexNode Inheritance object RegexNode RegexNodeConcatenation Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeConcatenation() public RegexNodeConcatenation() RegexNodeConcatenation(params RegexNode[]) public RegexNodeConcatenation(params RegexNode[] childNodes) Parameters childNodes RegexNode[] RegexNodeConcatenation(IList<RegexNode>) public RegexNodeConcatenation(IList<RegexNode> childNodes) Parameters childNodes IList<RegexNode> Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool ChildNodes public IList<RegexNode> ChildNodes { get; } Property Value IList<RegexNode> Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeConditionalMatch.html": {
    "href": "api/RegexBuilder.RegexNodeConditionalMatch.html",
    "title": "Class RegexNodeConditionalMatch | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeConditionalMatch Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeConditionalMatch : RegexNode Inheritance object RegexNode RegexNodeConditionalMatch Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeConditionalMatch(RegexNode, RegexNode, RegexNode) public RegexNodeConditionalMatch(RegexNode conditionExpression, RegexNode trueMatchExpression, RegexNode falseMatchExpression) Parameters conditionExpression RegexNode trueMatchExpression RegexNode falseMatchExpression RegexNode RegexNodeConditionalMatch(string, RegexNode, RegexNode) public RegexNodeConditionalMatch(string conditionGroupName, RegexNode trueMatchExpression, RegexNode falseMatchExpression) Parameters conditionGroupName string trueMatchExpression RegexNode falseMatchExpression RegexNode Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool ConditionExpression public RegexNode ConditionExpression { get; set; } Property Value RegexNode ConditionGroupName public string ConditionGroupName { get; set; } Property Value string FalseMatchExpression public RegexNode FalseMatchExpression { get; set; } Property Value RegexNode TrueMatchExpression public RegexNode TrueMatchExpression { get; set; } Property Value RegexNode Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeEscapingLiteral.html": {
    "href": "api/RegexBuilder.RegexNodeEscapingLiteral.html",
    "title": "Class RegexNodeEscapingLiteral | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeEscapingLiteral Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeEscapingLiteral : RegexNodeLiteral Inheritance object RegexNode RegexNodeLiteral RegexNodeEscapingLiteral Inherited Members RegexNodeLiteral.Value RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeEscapingLiteral(string) public RegexNodeEscapingLiteral(string value) Parameters value string Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeGroup.html": {
    "href": "api/RegexBuilder.RegexNodeGroup.html",
    "title": "Class RegexNodeGroup | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeGroup Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeGroup : RegexNode Inheritance object RegexNode RegexNodeGroup Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeGroup(RegexNode) public RegexNodeGroup(RegexNode innerExpression) Parameters innerExpression RegexNode RegexNodeGroup(RegexNode, bool) public RegexNodeGroup(RegexNode innerExpression, bool isCapturing) Parameters innerExpression RegexNode isCapturing bool RegexNodeGroup(RegexNode, string) public RegexNodeGroup(RegexNode innerExpression, string name) Parameters innerExpression RegexNode name string Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool InnerExpression public RegexNode InnerExpression { get; set; } Property Value RegexNode IsCapturing public bool IsCapturing { get; set; } Property Value bool Name public string Name { get; set; } Property Value string UseApostropheSyntax public bool UseApostropheSyntax { get; set; } Property Value bool Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeGroupReference.html": {
    "href": "api/RegexBuilder.RegexNodeGroupReference.html",
    "title": "Class RegexNodeGroupReference | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeGroupReference Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeGroupReference : RegexNode Inheritance object RegexNode RegexNodeGroupReference Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeGroupReference(int?) public RegexNodeGroupReference(int? groupIndex) Parameters groupIndex int? RegexNodeGroupReference(string) public RegexNodeGroupReference(string groupName) Parameters groupName string Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool GroupIndex public int? GroupIndex { get; set; } Property Value int? GroupName public string GroupName { get; set; } Property Value string Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeInlineOption.html": {
    "href": "api/RegexBuilder.RegexNodeInlineOption.html",
    "title": "Class RegexNodeInlineOption | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeInlineOption Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeInlineOption : RegexNode Inheritance object RegexNode RegexNodeInlineOption Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeInlineOption(RegexOptions, RegexNode) public RegexNodeInlineOption(RegexOptions options, RegexNode innerExpression) Parameters options RegexOptions innerExpression RegexNode Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool InnerExpression public RegexNode InnerExpression { get; set; } Property Value RegexNode Options public RegexOptions Options { get; set; } Property Value RegexOptions Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeInlineOptionGrouping.html": {
    "href": "api/RegexBuilder.RegexNodeInlineOptionGrouping.html",
    "title": "Class RegexNodeInlineOptionGrouping | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeInlineOptionGrouping Namespace RegexBuilder Assembly RegexBuilder.dll Represents an inline option grouping node with support for enabling and disabling options. Generates patterns like (?i:expr), (?im:expr), or (?i-m:expr). public class RegexNodeInlineOptionGrouping : RegexNode Inheritance object RegexNode RegexNodeInlineOptionGrouping Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeInlineOptionGrouping(RegexOptions, RegexNode) Initializes a new instance of the RegexNodeInlineOptionGrouping class. public RegexNodeInlineOptionGrouping(RegexOptions enabledOptions, RegexNode innerExpression) Parameters enabledOptions RegexOptions Options to enable. innerExpression RegexNode Inner expression. RegexNodeInlineOptionGrouping(RegexOptions, RegexOptions, RegexNode) Initializes a new instance of the RegexNodeInlineOptionGrouping class with both enabled and disabled options. public RegexNodeInlineOptionGrouping(RegexOptions enabledOptions, RegexOptions disabledOptions, RegexNode innerExpression) Parameters enabledOptions RegexOptions Options to enable. disabledOptions RegexOptions Options to disable. innerExpression RegexNode Inner expression. Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool DisabledOptions Gets or sets the options to be disabled for this group. public RegexOptions DisabledOptions { get; set; } Property Value RegexOptions EnabledOptions Gets or sets the options to be enabled for this group. public RegexOptions EnabledOptions { get; set; } Property Value RegexOptions InnerExpression Gets or sets the inner expression for this grouping. public RegexNode InnerExpression { get; set; } Property Value RegexNode Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeLiteral.html": {
    "href": "api/RegexBuilder.RegexNodeLiteral.html",
    "title": "Class RegexNodeLiteral | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeLiteral Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeLiteral : RegexNode Inheritance object RegexNode RegexNodeLiteral Derived RegexNodeEscapingLiteral Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeLiteral(string) public RegexNodeLiteral(string value) Parameters value string Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool Value public string Value { get; set; } Property Value string Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeLookAround.html": {
    "href": "api/RegexBuilder.RegexNodeLookAround.html",
    "title": "Class RegexNodeLookAround | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeLookAround Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexNodeLookAround : RegexNode Inheritance object RegexNode RegexNodeLookAround Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeLookAround(RegexLookAround, RegexNode, RegexNode) public RegexNodeLookAround(RegexLookAround lookAroundType, RegexNode lookAroundExpression, RegexNode matchExpression) Parameters lookAroundType RegexLookAround lookAroundExpression RegexNode matchExpression RegexNode Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool LookAroundExpression public RegexNode LookAroundExpression { get; set; } Property Value RegexNode LookAroundType public RegexLookAround LookAroundType { get; set; } Property Value RegexLookAround MatchExpression public RegexNode MatchExpression { get; set; } Property Value RegexNode Methods ToRegexPattern() Converts RegexNode to a Regex pattern string. public override string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexNodeUnicodeCategory.html": {
    "href": "api/RegexBuilder.RegexNodeUnicodeCategory.html",
    "title": "Class RegexNodeUnicodeCategory | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeUnicodeCategory Namespace RegexBuilder Assembly RegexBuilder.dll Represents a Unicode category escape sequence in a regular expression. Enables matching of Unicode letters, numbers, and other character categories. Supports both positive matching (\\p{name}) and negative matching (\\P{name}). public class RegexNodeUnicodeCategory : RegexNode Inheritance object RegexNode RegexNodeUnicodeCategory Inherited Members RegexNode.HasQuantifier RegexNode.Quantifier RegexNode.Add(RegexNode, RegexNode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexNodeUnicodeCategory(string) Initializes a new instance of the RegexNodeUnicodeCategory class. public RegexNodeUnicodeCategory(string categoryName) Parameters categoryName string The Unicode category name. RegexNodeUnicodeCategory(string, bool) Initializes a new instance of the RegexNodeUnicodeCategory class. public RegexNodeUnicodeCategory(string categoryName, bool isNegated) Parameters categoryName string The Unicode category name. isNegated bool If true, generates \\P{name} instead of \\p{name}. Properties AllowQuantifier protected override bool AllowQuantifier { get; } Property Value bool CategoryName Gets or sets the Unicode category name (e.g., \"L\", \"N\", \"IsCyrillic\"). public string CategoryName { get; set; } Property Value string IsNegated Gets or sets a value indicating whether this category should be negated (use \\P instead of \\p). public bool IsNegated { get; set; } Property Value bool Methods ToRegexPattern() Converts this node to a regular expression pattern string. public override string ToRegexPattern() Returns string The regular expression pattern string (e.g., \"\\p{L}\", \"\\P{N}\")."
  },
  "api/RegexBuilder.RegexQuantifier.html": {
    "href": "api/RegexBuilder.RegexQuantifier.html",
    "title": "Class RegexQuantifier | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexQuantifier Namespace RegexBuilder Assembly RegexBuilder.dll public class RegexQuantifier Inheritance object RegexQuantifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegexQuantifier() Initializes a new instance of RegexQuantifier. public RegexQuantifier() RegexQuantifier(int?, int?) Initializes a new instance of RegexQuantifier. public RegexQuantifier(int? minOccurrenceCount, int? maxOccurrenceCount) Parameters minOccurrenceCount int? Minimum occurrence count. maxOccurrenceCount int? Maximum occurrence count. RegexQuantifier(int?, int?, bool) Initializes a new instance of RegexQuantifier. public RegexQuantifier(int? minOccurrenceCount, int? maxOccurrenceCount, bool isLazy) Parameters minOccurrenceCount int? Minimum occurrence count. maxOccurrenceCount int? Maximum occurrence count. isLazy bool True - use lazy quantifier. False - use greedy quantifier. Properties IsLazy Specifies whether the quantified expression should be matched as few times as possible. public bool IsLazy { get; set; } Property Value bool MaxOccurrenceCount Maximum occurrence count. NULL = unlimited. public int? MaxOccurrenceCount { get; set; } Property Value int? MinOccurrenceCount Minimum occurrence count. public int? MinOccurrenceCount { get; set; } Property Value int? None NULL quantifier. public static RegexQuantifier None { get; } Property Value RegexQuantifier OneOrMore The \"+\" quantifier. public static RegexQuantifier OneOrMore { get; } Property Value RegexQuantifier OneOrMoreLazy The \"+?\" quantifier. public static RegexQuantifier OneOrMoreLazy { get; } Property Value RegexQuantifier ZeroOrMore The \"*\" quantifier. public static RegexQuantifier ZeroOrMore { get; } Property Value RegexQuantifier ZeroOrMoreLazy The \"*?\" quantifier. public static RegexQuantifier ZeroOrMoreLazy { get; } Property Value RegexQuantifier ZeroOrOne The \"?\" quantifier. public static RegexQuantifier ZeroOrOne { get; } Property Value RegexQuantifier ZeroOrOneLazy The \"??\" quantifier. public static RegexQuantifier ZeroOrOneLazy { get; } Property Value RegexQuantifier Methods AtLeast(int) The \"{n,}\" quantifier. Minimum occurrence count. public static RegexQuantifier AtLeast(int minOccurrenceCount) Parameters minOccurrenceCount int Returns RegexQuantifier An instance of RegexQuantifier with the specified options. AtLeast(int, bool) The \"{n,}\" or \"{n,}?\" quantifier. Minimum occurrence count. True - use lazy quantifier. False - use greedy quantifier. public static RegexQuantifier AtLeast(int minOccurrenceCount, bool isLazy) Parameters minOccurrenceCount int isLazy bool Returns RegexQuantifier An instance of RegexQuantifier with the specified options. Custom(int?, int?, bool) Custom \"{n,m}\" or \"{n,m}?\" quantifier. public static RegexQuantifier Custom(int? minOccurrenceCount, int? maxOccurrenceCount, bool isLazy) Parameters minOccurrenceCount int? Minimum occurrence count. maxOccurrenceCount int? Maximum occurrence count. isLazy bool True - use lazy quantifier. False - use greedy quantifier. Returns RegexQuantifier An instance of RegexQuantifier with the specified options. Exactly(int) The \"{n}\" or \"{n}?\" quantifier. Exact occurrence count. public static RegexQuantifier Exactly(int occurrenceCount) Parameters occurrenceCount int Returns RegexQuantifier An instance of RegexQuantifier with the specified options. Exactly(int, bool) The \"{n}\" or \"{n}?\" quantifier. Exact occurrence count. True - use lazy quantifier. False - use greedy quantifier. public static RegexQuantifier Exactly(int occurrenceCount, bool isLazy) Parameters occurrenceCount int isLazy bool Returns RegexQuantifier An instance of RegexQuantifier with the specified options. ToRegexPattern() Converts RegexQuantifier to a Regex pattern string. public virtual string ToRegexPattern() Returns string"
  },
  "api/RegexBuilder.RegexStringEscaper.html": {
    "href": "api/RegexBuilder.RegexStringEscaper.html",
    "title": "Class RegexStringEscaper | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexStringEscaper Namespace RegexBuilder Assembly RegexBuilder.dll public static class RegexStringEscaper Inheritance object RegexStringEscaper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Escape(string, bool) public static string Escape(string value, bool escapeBackslash) Parameters value string escapeBackslash bool Returns string"
  },
  "api/RegexBuilder.SubstitutionBuilder.html": {
    "href": "api/RegexBuilder.SubstitutionBuilder.html",
    "title": "Class SubstitutionBuilder | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionBuilder Namespace RegexBuilder Assembly RegexBuilder.dll Factory class for creating substitution/replacement pattern nodes. Use these methods to build replacement patterns for Regex.Replace() operations. public static class SubstitutionBuilder Inheritance object SubstitutionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AfterMatch() Creates a substitution that outputs all text after the match. Equivalent to the $' substitution pattern. public static SubstitutionSpecialReference AfterMatch() Returns SubstitutionSpecialReference A substitution node that outputs the text after the match. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.AfterMatch() ); // Replaces the match with everything that comes after it BeforeMatch() Creates a substitution that outputs all text before the match. Equivalent to the $` substitution pattern. public static SubstitutionSpecialReference BeforeMatch() Returns SubstitutionSpecialReference A substitution node that outputs the text before the match. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.BeforeMatch() ); // Replaces the match with everything that came before it Build(SubstitutionNode) Builds a substitution pattern string from a single substitution node. public static string Build(SubstitutionNode node) Parameters node SubstitutionNode The substitution node to convert. Returns string A string that can be used as a replacement pattern in Regex.Replace(). Build(params SubstitutionNode[]) Builds a substitution pattern string from multiple substitution nodes. The nodes are concatenated in the order provided. public static string Build(params SubstitutionNode[] nodes) Parameters nodes SubstitutionNode[] The substitution nodes to concatenate. Returns string A string that can be used as a replacement pattern in Regex.Replace(). Concatenate(params SubstitutionNode[]) Creates a concatenation of multiple substitution nodes. This is equivalent to calling Build() with multiple nodes, but returns a SubstitutionNode that can be used as part of a larger substitution pattern. public static SubstitutionConcatenation Concatenate(params SubstitutionNode[] nodes) Parameters nodes SubstitutionNode[] The substitution nodes to concatenate. Returns SubstitutionConcatenation A substitution node representing the concatenation. Examples var part1 = SubstitutionBuilder.Concatenate( SubstitutionBuilder.Literal(\"(\"), SubstitutionBuilder.Group(1), SubstitutionBuilder.Literal(\")\") ); var replacement = SubstitutionBuilder.Build( part1, SubstitutionBuilder.Literal(\" \"), SubstitutionBuilder.Group(2) ); EntireInput() Creates a substitution that outputs the entire input string. Equivalent to the $_ substitution pattern. public static SubstitutionSpecialReference EntireInput() Returns SubstitutionSpecialReference A substitution node that outputs the entire input string. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.EntireInput() ); // Replaces the match with the entire input string Group(int) Creates a substitution that references a numbered capturing group. public static SubstitutionGroupReference Group(int groupNumber) Parameters groupNumber int The 1-based group number to reference. Returns SubstitutionGroupReference A substitution node that outputs the value of the specified group. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.Group(2), SubstitutionBuilder.Literal(\" \"), SubstitutionBuilder.Group(1) ); // Produces: \"$2 $1\" Group(string) Creates a substitution that references a named capturing group. public static SubstitutionGroupReference Group(string groupName) Parameters groupName string The name of the group to reference. Returns SubstitutionGroupReference A substitution node that outputs the value of the specified named group. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.Group(\"word2\"), SubstitutionBuilder.Literal(\" \"), SubstitutionBuilder.Group(\"word1\") ); // Produces: \"${word2} ${word1}\" LastCapturedGroup() Creates a substitution that outputs the last captured group. Equivalent to the $+ substitution pattern. public static SubstitutionSpecialReference LastCapturedGroup() Returns SubstitutionSpecialReference A substitution node that outputs the last captured group. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.LastCapturedGroup() ); // Outputs the last group that was captured in the match Literal(string) Creates a literal text substitution node. Dollar signs ($) are automatically escaped. public static SubstitutionLiteral Literal(string text) Parameters text string The literal text to include in the replacement. Returns SubstitutionLiteral A substitution node representing the literal text. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.Literal(\"Hello \") ); LiteralDollar() Creates a substitution that outputs a literal dollar sign ($). Equivalent to the $$ substitution pattern. Note: This is rarely needed as the Literal() method automatically escapes dollar signs. public static SubstitutionSpecialReference LiteralDollar() Returns SubstitutionSpecialReference A substitution node that outputs a literal dollar sign. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.LiteralDollar(), SubstitutionBuilder.Group(1) ); // Produces: \"$$1\" which outputs \"$\" followed by the value of group 1 WholeMatch() Creates a substitution that outputs the entire matched text. Equivalent to the $& substitution pattern. public static SubstitutionSpecialReference WholeMatch() Returns SubstitutionSpecialReference A substitution node that outputs the whole match. Examples var replacement = SubstitutionBuilder.Build( SubstitutionBuilder.Literal(\"[\"), SubstitutionBuilder.WholeMatch(), SubstitutionBuilder.Literal(\"]\") ); // Wraps the matched text in brackets"
  },
  "api/RegexBuilder.SubstitutionConcatenation.html": {
    "href": "api/RegexBuilder.SubstitutionConcatenation.html",
    "title": "Class SubstitutionConcatenation | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionConcatenation Namespace RegexBuilder Assembly RegexBuilder.dll Represents a concatenation of multiple substitution nodes. public class SubstitutionConcatenation : SubstitutionNode Inheritance object SubstitutionNode SubstitutionConcatenation Inherited Members SubstitutionNode.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SubstitutionConcatenation(params SubstitutionNode[]) Initializes a new instance with the specified child nodes. public SubstitutionConcatenation(params SubstitutionNode[] childNodes) Parameters childNodes SubstitutionNode[] The substitution nodes to concatenate. SubstitutionConcatenation(IEnumerable<SubstitutionNode>) Initializes a new instance with the specified child nodes. public SubstitutionConcatenation(IEnumerable<SubstitutionNode> childNodes) Parameters childNodes IEnumerable<SubstitutionNode> The substitution nodes to concatenate. Properties ChildNodes Gets the child substitution nodes. public IReadOnlyList<SubstitutionNode> ChildNodes { get; } Property Value IReadOnlyList<SubstitutionNode> Methods ToSubstitutionPattern() Converts this concatenation to a substitution pattern string. public override string ToSubstitutionPattern() Returns string The concatenated substitution patterns of all child nodes."
  },
  "api/RegexBuilder.SubstitutionGroupReference.html": {
    "href": "api/RegexBuilder.SubstitutionGroupReference.html",
    "title": "Class SubstitutionGroupReference | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionGroupReference Namespace RegexBuilder Assembly RegexBuilder.dll Represents a substitution that references a captured group by number or name. public class SubstitutionGroupReference : SubstitutionNode Inheritance object SubstitutionNode SubstitutionGroupReference Inherited Members SubstitutionNode.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SubstitutionGroupReference(int) Initializes a new instance that references a numbered group. public SubstitutionGroupReference(int groupNumber) Parameters groupNumber int The 1-based group number to reference. SubstitutionGroupReference(string) Initializes a new instance that references a named group. public SubstitutionGroupReference(string groupName) Parameters groupName string The name of the group to reference. Properties GroupName Gets the group name, or null if referencing by number. public string GroupName { get; } Property Value string GroupNumber Gets the group number (1-based), or null if referencing by name. public int? GroupNumber { get; } Property Value int? Methods ToSubstitutionPattern() Converts this group reference to a substitution pattern string. public override string ToSubstitutionPattern() Returns string A substitution pattern like \"\\(1\" or \"\\){groupName}\"."
  },
  "api/RegexBuilder.SubstitutionLiteral.html": {
    "href": "api/RegexBuilder.SubstitutionLiteral.html",
    "title": "Class SubstitutionLiteral | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionLiteral Namespace RegexBuilder Assembly RegexBuilder.dll Represents a literal text substitution node. Dollar signs ($) are automatically escaped. public class SubstitutionLiteral : SubstitutionNode Inheritance object SubstitutionNode SubstitutionLiteral Inherited Members SubstitutionNode.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SubstitutionLiteral(string) Initializes a new instance of SubstitutionLiteral with the specified text. public SubstitutionLiteral(string text) Parameters text string The literal text to include in the substitution pattern. Properties Text Gets the literal text value. public string Text { get; } Property Value string Methods ToSubstitutionPattern() Converts this literal to a substitution pattern string, escaping dollar signs. public override string ToSubstitutionPattern() Returns string The literal text with dollar signs escaped."
  },
  "api/RegexBuilder.SubstitutionNode.html": {
    "href": "api/RegexBuilder.SubstitutionNode.html",
    "title": "Class SubstitutionNode | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionNode Namespace RegexBuilder Assembly RegexBuilder.dll Represents a substitution/replacement pattern node that can be used in regex replacement operations. This is the base class for all substitution pattern nodes. public abstract class SubstitutionNode Inheritance object SubstitutionNode Derived SubstitutionConcatenation SubstitutionGroupReference SubstitutionLiteral SubstitutionSpecialReference Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ToString() Returns the substitution pattern string. public override string ToString() Returns string ToSubstitutionPattern() Converts this node to a substitution pattern string that can be used in Regex.Replace() operations. public abstract string ToSubstitutionPattern() Returns string A string representation of the substitution pattern."
  },
  "api/RegexBuilder.SubstitutionSpecialReference.html": {
    "href": "api/RegexBuilder.SubstitutionSpecialReference.html",
    "title": "Class SubstitutionSpecialReference | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionSpecialReference Namespace RegexBuilder Assembly RegexBuilder.dll Represents a special substitution reference (like $&, $`, $', $+, $_, $$). public class SubstitutionSpecialReference : SubstitutionNode Inheritance object SubstitutionNode SubstitutionSpecialReference Inherited Members SubstitutionNode.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SubstitutionSpecialReference(SubstitutionType) Initializes a new instance with the specified substitution type. public SubstitutionSpecialReference(SubstitutionType type) Parameters type SubstitutionType The type of special substitution. Properties Type Gets the type of special substitution. public SubstitutionType Type { get; } Property Value SubstitutionType Methods ToSubstitutionPattern() Converts this special reference to a substitution pattern string. public override string ToSubstitutionPattern() Returns string A substitution pattern like \"\\(&\", \"\\)`\", \"\\('\", \"\\)+\", \"\\(_\", or \"$\\)\"."
  },
  "api/RegexBuilder.SubstitutionType.html": {
    "href": "api/RegexBuilder.SubstitutionType.html",
    "title": "Enum SubstitutionType | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Enum SubstitutionType Namespace RegexBuilder Assembly RegexBuilder.dll Defines the types of special substitution references. public enum SubstitutionType Fields AfterMatch = 2 Substitutes all text after the match ($'). BeforeMatch = 1 Substitutes all text before the match ($`). EntireInput = 4 Substitutes the entire input string ($_). LastGroup = 3 Substitutes the last group that was captured ($+). LiteralDollar = 5 Substitutes a literal dollar sign ($$). WholeMatch = 0 Substitutes a copy of the whole match ($&)."
  },
  "api/RegexBuilder.Tests.CommonPatternsTests.html": {
    "href": "api/RegexBuilder.Tests.CommonPatternsTests.html",
    "title": "Class CommonPatternsTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class CommonPatternsTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class CommonPatternsTests Inheritance object CommonPatternsTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestCombinedEmailAndUrl() [TestMethod] public void TestCombinedEmailAndUrl() TestEmailInAlternation() [TestMethod] public void TestEmailInAlternation() TestEmailPattern_CombinedWithOtherNodes() [TestMethod] public void TestEmailPattern_CombinedWithOtherNodes() TestEmailPattern_GeneratesCorrectRegex() [TestMethod] public void TestEmailPattern_GeneratesCorrectRegex() TestEmailPattern_InvalidEmailNoAt() [TestMethod] public void TestEmailPattern_InvalidEmailNoAt() TestEmailPattern_InvalidEmailNoDomain() [TestMethod] public void TestEmailPattern_InvalidEmailNoDomain() TestEmailPattern_InvalidEmailNoLocalPart() [TestMethod] public void TestEmailPattern_InvalidEmailNoLocalPart() TestEmailPattern_InvalidEmailNoTLD() [TestMethod] public void TestEmailPattern_InvalidEmailNoTLD() TestEmailPattern_InvalidEmailTLDTooLong() [TestMethod] public void TestEmailPattern_InvalidEmailTLDTooLong() TestEmailPattern_InvalidEmailTLDTooShort() [TestMethod] public void TestEmailPattern_InvalidEmailTLDTooShort() TestEmailPattern_ValidEmailWithDot() [TestMethod] public void TestEmailPattern_ValidEmailWithDot() TestEmailPattern_ValidEmailWithHyphen() [TestMethod] public void TestEmailPattern_ValidEmailWithHyphen() TestEmailPattern_ValidEmailWithLongTLD() [TestMethod] public void TestEmailPattern_ValidEmailWithLongTLD() TestEmailPattern_ValidEmailWithNumbers() [TestMethod] public void TestEmailPattern_ValidEmailWithNumbers() TestEmailPattern_ValidEmailWithPlus() [TestMethod] public void TestEmailPattern_ValidEmailWithPlus() TestEmailPattern_ValidEmailWithShortTLD() [TestMethod] public void TestEmailPattern_ValidEmailWithShortTLD() TestEmailPattern_ValidEmailWithSubdomain() [TestMethod] public void TestEmailPattern_ValidEmailWithSubdomain() TestEmailPattern_ValidEmailWithUnderscore() [TestMethod] public void TestEmailPattern_ValidEmailWithUnderscore() TestEmailPattern_ValidSimpleEmail() [TestMethod] public void TestEmailPattern_ValidSimpleEmail() TestEmailWithQuantifier() [TestMethod] public void TestEmailWithQuantifier() TestUrlPattern_CombinedWithOtherNodes() [TestMethod] public void TestUrlPattern_CombinedWithOtherNodes() TestUrlPattern_GeneratesCorrectRegex() [TestMethod] public void TestUrlPattern_GeneratesCorrectRegex() TestUrlPattern_ValidFtpUrl() [TestMethod] public void TestUrlPattern_ValidFtpUrl() TestUrlPattern_ValidHttpUrl() [TestMethod] public void TestUrlPattern_ValidHttpUrl() TestUrlPattern_ValidHttpsUrl() [TestMethod] public void TestUrlPattern_ValidHttpsUrl() TestUrlPattern_ValidUrlWithAllComponents() [TestMethod] public void TestUrlPattern_ValidUrlWithAllComponents() TestUrlPattern_ValidUrlWithComplexPath() [TestMethod] public void TestUrlPattern_ValidUrlWithComplexPath() TestUrlPattern_ValidUrlWithFragment() [TestMethod] public void TestUrlPattern_ValidUrlWithFragment() TestUrlPattern_ValidUrlWithHyphenInDomain() [TestMethod] public void TestUrlPattern_ValidUrlWithHyphenInDomain() TestUrlPattern_ValidUrlWithLongPath() [TestMethod] public void TestUrlPattern_ValidUrlWithLongPath() TestUrlPattern_ValidUrlWithNumbersInDomain() [TestMethod] public void TestUrlPattern_ValidUrlWithNumbersInDomain() TestUrlPattern_ValidUrlWithPath() [TestMethod] public void TestUrlPattern_ValidUrlWithPath() TestUrlPattern_ValidUrlWithPort() [TestMethod] public void TestUrlPattern_ValidUrlWithPort() TestUrlPattern_ValidUrlWithPortAndPath() [TestMethod] public void TestUrlPattern_ValidUrlWithPortAndPath() TestUrlPattern_ValidUrlWithQueryString() [TestMethod] public void TestUrlPattern_ValidUrlWithQueryString() TestUrlPattern_ValidUrlWithSpecialCharsInPath() [TestMethod] public void TestUrlPattern_ValidUrlWithSpecialCharsInPath() TestUrlPattern_ValidUrlWithSubdomain() [TestMethod] public void TestUrlPattern_ValidUrlWithSubdomain() TestUrlPattern_ValidUrlWithoutProtocol() [TestMethod] public void TestUrlPattern_ValidUrlWithoutProtocol() TestUrlWithQuantifier() [TestMethod] public void TestUrlWithQuantifier()"
  },
  "api/RegexBuilder.Tests.CustomRegexTests.html": {
    "href": "api/RegexBuilder.Tests.CustomRegexTests.html",
    "title": "Class CustomRegexTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class CustomRegexTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class CustomRegexTests Inheritance object CustomRegexTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestEmailValidator() [TestMethod] public void TestEmailValidator() TestHrefParser() [TestMethod] public void TestHrefParser() TestServerURLParser() [TestMethod] public void TestServerURLParser()"
  },
  "api/RegexBuilder.Tests.ExtensionMethodTests.html": {
    "href": "api/RegexBuilder.Tests.ExtensionMethodTests.html",
    "title": "Class ExtensionMethodTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class ExtensionMethodTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class ExtensionMethodTests Inheritance object ExtensionMethodTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestReplaceMany1() [TestMethod] public void TestReplaceMany1() TestReplaceMany2() [TestMethod] public void TestReplaceMany2() TestReplaceManyWithDifferentArgumentLength() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestReplaceManyWithDifferentArgumentLength() TestReplaceManyWithNullArguments1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestReplaceManyWithNullArguments1() TestReplaceManyWithNullArguments2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestReplaceManyWithNullArguments2() TestReplaceManyWithNullArguments3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestReplaceManyWithNullArguments3() TestReplaceManyWithNullExtensionObject() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestReplaceManyWithNullExtensionObject()"
  },
  "api/RegexBuilder.Tests.PatternBuilderTests.html": {
    "href": "api/RegexBuilder.Tests.PatternBuilderTests.html",
    "title": "Class PatternBuilderTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class PatternBuilderTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class PatternBuilderTests Inheritance object PatternBuilderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AnyCharacter_WithQuantifier_MatchesAnyCharacter() [TestMethod] public void AnyCharacter_WithQuantifier_MatchesAnyCharacter() ApplyQuantifier_WithMaxLessThanMin_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void ApplyQuantifier_WithMaxLessThanMin_ThrowsException() ApplyQuantifier_WithNegativeMax_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void ApplyQuantifier_WithNegativeMax_ThrowsException() ApplyQuantifier_WithNegativeMin_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void ApplyQuantifier_WithNegativeMin_ThrowsException() Build_EmptyBuilder_ReturnsNull() [TestMethod] public void Build_EmptyBuilder_ReturnsNull() CharacterSet_WithEmptyString_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void CharacterSet_WithEmptyString_ThrowsException() CharacterSet_WithNullString_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void CharacterSet_WithNullString_ThrowsException() CharacterSet_WithQuantifier_MatchesCustomCharacterSet() [TestMethod] public void CharacterSet_WithQuantifier_MatchesCustomCharacterSet() ComplexPattern_IDWithAlternatives_WorksCorrectly() [TestMethod] public void ComplexPattern_IDWithAlternatives_WorksCorrectly() ComplexPattern_PhoneNumber_WorksCorrectly() [TestMethod] public void ComplexPattern_PhoneNumber_WorksCorrectly() ComplexPattern_URLWithOptionalProtocol_WorksCorrectly() [TestMethod] public void ComplexPattern_URLWithOptionalProtocol_WorksCorrectly() Digits_NoQuantifier_MatchesSingleDigit() [TestMethod] public void Digits_NoQuantifier_MatchesSingleDigit() Digits_WithMinMax_MatchesQuantifiedPattern() [TestMethod] public void Digits_WithMinMax_MatchesQuantifiedPattern() Digits_WithMinOnly_MatchesMinimumQuantifier() [TestMethod] public void Digits_WithMinOnly_MatchesMinimumQuantifier() Email_AddsEmailPattern() [TestMethod] public void Email_AddsEmailPattern() End_AddedToPattern_GeneratesEndAnchor() [TestMethod] public void End_AddedToPattern_GeneratesEndAnchor() End_CalledTwice_ThrowsException() [TestMethod] [ExpectedException(typeof(InvalidOperationException))] public void End_CalledTwice_ThrowsException() Group_WithBuilderAction_CreatesCapturingGroup() [TestMethod] public void Group_WithBuilderAction_CreatesCapturingGroup() Group_WithNullAction_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Group_WithNullAction_ThrowsException() Letters_WithQuantifier_MatchesLetterPattern() [TestMethod] public void Letters_WithQuantifier_MatchesLetterPattern() Literal_SimpleString_GeneratesCorrectPattern() [TestMethod] public void Literal_SimpleString_GeneratesCorrectPattern() Literal_WithEmptyString_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Literal_WithEmptyString_ThrowsException() Literal_WithNullString_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Literal_WithNullString_ThrowsException() Literal_WithSpecialCharacters_EscapesCorrectly() [TestMethod] public void Literal_WithSpecialCharacters_EscapesCorrectly() MethodChaining_MultipleOperations_WorksCorrectly() [TestMethod] public void MethodChaining_MultipleOperations_WorksCorrectly() MethodChaining_ReturnsPatternBuilder() [TestMethod] public void MethodChaining_ReturnsPatternBuilder() MultipleOr_CreatesMultiAlternation() [TestMethod] public void MultipleOr_CreatesMultiAlternation() NestedGroups_CreatesProperNesting() [TestMethod] public void NestedGroups_CreatesProperNesting() NonCapturingGroup_WithBuilderAction_CreatesNonCapturingGroup() [TestMethod] public void NonCapturingGroup_WithBuilderAction_CreatesNonCapturingGroup() Optional_WithAction_MakesPatternOptional() [TestMethod] public void Optional_WithAction_MakesPatternOptional() Optional_WithMultipleCharacters_MakesGroupOptional() [TestMethod] public void Optional_WithMultipleCharacters_MakesGroupOptional() Or_WithAction_CreatesAlternation() [TestMethod] public void Or_WithAction_CreatesAlternation() Or_WithComplexPatterns_CreatesComplexAlternation() [TestMethod] public void Or_WithComplexPatterns_CreatesComplexAlternation() Or_WithNullAction_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Or_WithNullAction_ThrowsException() Or_WithRegexNode_CreatesAlternation() [TestMethod] public void Or_WithRegexNode_CreatesAlternation() Or_WithinGroups_CreatesGroupedAlternation() [TestMethod] public void Or_WithinGroups_CreatesGroupedAlternation() Pattern_WithCustomNode_AddsNodeToBuilder() [TestMethod] public void Pattern_WithCustomNode_AddsNodeToBuilder() Pattern_WithNullNode_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Pattern_WithNullNode_ThrowsException() SequentialPatterns_ConcatenatesCorrectly() [TestMethod] public void SequentialPatterns_ConcatenatesCorrectly() StartAndEnd_GeneratesAnchors() [TestMethod] public void StartAndEnd_GeneratesAnchors() Start_AddedToPattern_GeneratesStartAnchor() [TestMethod] public void Start_AddedToPattern_GeneratesStartAnchor() Start_CalledTwice_ThrowsException() [TestMethod] [ExpectedException(typeof(InvalidOperationException))] public void Start_CalledTwice_ThrowsException() Url_AddsUrlPattern() [TestMethod] public void Url_AddsUrlPattern() Whitespace_WithQuantifier_MatchesWhitespacePattern() [TestMethod] public void Whitespace_WithQuantifier_MatchesWhitespacePattern() WordCharacter_WithQuantifier_MatchesWordCharacters() [TestMethod] public void WordCharacter_WithQuantifier_MatchesWordCharacters()"
  },
  "api/RegexBuilder.Tests.RegexBuilderTests.html": {
    "href": "api/RegexBuilder.Tests.RegexBuilderTests.html",
    "title": "Class RegexBuilderTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexBuilderTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class RegexBuilderTests Inheritance object RegexBuilderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestAnchorShortcutMatching() [TestMethod] public void TestAnchorShortcutMatching() TestAsciiCharacterRendering() [TestMethod] public void TestAsciiCharacterRendering() TestBellCharacterShortcut() [TestMethod] public void TestBellCharacterShortcut() TestBellCharacterShortcutWithQuantifier() [TestMethod] public void TestBellCharacterShortcutWithQuantifier() TestBuildMethod1() [TestMethod] public void TestBuildMethod1() TestBuildMethod2() [TestMethod] public void TestBuildMethod2() TestBuildMethod3() [TestMethod] public void TestBuildMethod3() TestBuildMethod4() [TestMethod] public void TestBuildMethod4() TestBuildMethodValidation1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestBuildMethodValidation1() TestBuildMethodValidation2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestBuildMethodValidation2() TestBuildMethodValidation3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestBuildMethodValidation3() TestCharacterClassShortcutMatching() [TestMethod] public void TestCharacterClassShortcutMatching() TestDigitShortcut() [TestMethod] public void TestDigitShortcut() TestDigitShortcutWithQuantifier() [TestMethod] public void TestDigitShortcutWithQuantifier() TestEscapeCharacterShortcut() [TestMethod] public void TestEscapeCharacterShortcut() TestEscapeCharacterShortcutWithQuantifier() [TestMethod] public void TestEscapeCharacterShortcutWithQuantifier() TestEscapeShortcutMatching() [TestMethod] public void TestEscapeShortcutMatching() TestFormFeedShortcut() [TestMethod] public void TestFormFeedShortcut() TestFormFeedShortcutWithQuantifier() [TestMethod] public void TestFormFeedShortcutWithQuantifier() TestInlineOptionGroupingCaseInsensitiveMatching() [TestMethod] public void TestInlineOptionGroupingCaseInsensitiveMatching() TestInlineOptionGroupingInvalidOptionCompiled() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionGroupingInvalidOptionCompiled() TestInlineOptionGroupingInvalidOptionCultureInvariant() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionGroupingInvalidOptionCultureInvariant() TestInlineOptionGroupingInvalidOptionECMAScript() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionGroupingInvalidOptionECMAScript() TestInlineOptionGroupingInvalidOptionRightToLeft() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionGroupingInvalidOptionRightToLeft() TestInlineOptionGroupingMultilineMatching() [TestMethod] public void TestInlineOptionGroupingMultilineMatching() TestInlineOptionGroupingMultipleEnabledMultipleDisabled() [TestMethod] public void TestInlineOptionGroupingMultipleEnabledMultipleDisabled() TestInlineOptionGroupingMultipleOptionsAll() [TestMethod] public void TestInlineOptionGroupingMultipleOptionsAll() TestInlineOptionGroupingMultipleOptionsIgnoreCaseMultiline() [TestMethod] public void TestInlineOptionGroupingMultipleOptionsIgnoreCaseMultiline() TestInlineOptionGroupingNoneEnabledWithDisabled() [TestMethod] public void TestInlineOptionGroupingNoneEnabledWithDisabled() TestInlineOptionGroupingNullExpression() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestInlineOptionGroupingNullExpression() TestInlineOptionGroupingSingleOptionExplicitCapture() [TestMethod] public void TestInlineOptionGroupingSingleOptionExplicitCapture() TestInlineOptionGroupingSingleOptionIgnoreCase() [TestMethod] public void TestInlineOptionGroupingSingleOptionIgnoreCase() TestInlineOptionGroupingSingleOptionIgnorePatternWhitespace() [TestMethod] public void TestInlineOptionGroupingSingleOptionIgnorePatternWhitespace() TestInlineOptionGroupingSingleOptionMultiline() [TestMethod] public void TestInlineOptionGroupingSingleOptionMultiline() TestInlineOptionGroupingSingleOptionSingleline() [TestMethod] public void TestInlineOptionGroupingSingleOptionSingleline() TestInlineOptionGroupingSinglelineMatching() [TestMethod] public void TestInlineOptionGroupingSinglelineMatching() TestInlineOptionGroupingWithComplexExpression() [TestMethod] public void TestInlineOptionGroupingWithComplexExpression() TestInlineOptionGroupingWithDisabledOptions() [TestMethod] public void TestInlineOptionGroupingWithDisabledOptions() TestLineEndShortcut() [TestMethod] public void TestLineEndShortcut() TestLineStartShortcut() [TestMethod] public void TestLineStartShortcut() TestMatchPointAnchorShortcut() [TestMethod] public void TestMatchPointAnchorShortcut() TestMetaCharacterRendering() [TestMethod] public void TestMetaCharacterRendering() TestNonDigitShortcut() [TestMethod] public void TestNonDigitShortcut() TestNonDigitShortcutWithQuantifier() [TestMethod] public void TestNonDigitShortcutWithQuantifier() TestNonWhitespaceShortcut() [TestMethod] public void TestNonWhitespaceShortcut() TestNonWhitespaceShortcutWithQuantifier() [TestMethod] public void TestNonWhitespaceShortcutWithQuantifier() TestNonWordBoundaryShortcut() [TestMethod] public void TestNonWordBoundaryShortcut() TestNonWordCharacterShortcut() [TestMethod] public void TestNonWordCharacterShortcut() TestNonWordCharacterShortcutWithQuantifier() [TestMethod] public void TestNonWordCharacterShortcutWithQuantifier() TestOctalCharacterShortcut() [TestMethod] public void TestOctalCharacterShortcut() TestOctalCharacterShortcutSmallValue() [TestMethod] public void TestOctalCharacterShortcutSmallValue() TestOctalCharacterShortcutWithQuantifier() [TestMethod] public void TestOctalCharacterShortcutWithQuantifier() TestShortcutsInConcatenation() [TestMethod] public void TestShortcutsInConcatenation() TestShortcutsInGroup() [TestMethod] public void TestShortcutsInGroup() TestStringEndAbsoluteShortcut() [TestMethod] public void TestStringEndAbsoluteShortcut() TestStringEndShortcut() [TestMethod] public void TestStringEndShortcut() TestStringStartShortcut() [TestMethod] public void TestStringStartShortcut() TestUnicodeCharacterRendering() [TestMethod] public void TestUnicodeCharacterRendering() TestVerticalTabShortcut() [TestMethod] public void TestVerticalTabShortcut() TestVerticalTabShortcutWithQuantifier() [TestMethod] public void TestVerticalTabShortcutWithQuantifier() TestWhitespaceShortcut() [TestMethod] public void TestWhitespaceShortcut() TestWhitespaceShortcutWithQuantifier() [TestMethod] public void TestWhitespaceShortcutWithQuantifier() TestWordBoundaryShortcut() [TestMethod] public void TestWordBoundaryShortcut() TestWordCharacterShortcut() [TestMethod] public void TestWordCharacterShortcut() TestWordCharacterShortcutWithQuantifier() [TestMethod] public void TestWordCharacterShortcutWithQuantifier()"
  },
  "api/RegexBuilder.Tests.RegexNodeRenderingTests.html": {
    "href": "api/RegexBuilder.Tests.RegexNodeRenderingTests.html",
    "title": "Class RegexNodeRenderingTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeRenderingTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class RegexNodeRenderingTests Inheritance object RegexNodeRenderingTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestAlternationNodeRendering() [TestMethod] public void TestAlternationNodeRendering() TestBacktrackingSuppressionNodeRendering() [TestMethod] public void TestBacktrackingSuppressionNodeRendering() TestBalancingGroupAPI_FactoryMethodConsistency() [TestMethod] public void TestBalancingGroupAPI_FactoryMethodConsistency() TestBalancingGroupAfterModifyingInnerExpression() [TestMethod] public void TestBalancingGroupAfterModifyingInnerExpression() TestBalancingGroupBasicSyntax() [TestMethod] public void TestBalancingGroupBasicSyntax() TestBalancingGroupComplexInnerExpressions() [TestMethod] public void TestBalancingGroupComplexInnerExpressions() TestBalancingGroupComplexNesting_ThreeLevel() [TestMethod] public void TestBalancingGroupComplexNesting_ThreeLevel() TestBalancingGroupEdgeCase_EmptyPopName() [TestMethod] public void TestBalancingGroupEdgeCase_EmptyPopName() TestBalancingGroupEdgeCase_LongGroupNames() [TestMethod] public void TestBalancingGroupEdgeCase_LongGroupNames() TestBalancingGroupEdgeCase_NumbersInGroupNames() [TestMethod] public void TestBalancingGroupEdgeCase_NumbersInGroupNames() TestBalancingGroupEdgeCase_SameNamePushAndPop() [TestMethod] public void TestBalancingGroupEdgeCase_SameNamePushAndPop() TestBalancingGroupEdgeCase_UnderscoreInGroupNames() [TestMethod] public void TestBalancingGroupEdgeCase_UnderscoreInGroupNames() TestBalancingGroupEmptyPushNameThrows() [TestMethod] public void TestBalancingGroupEmptyPushNameThrows() TestBalancingGroupErrorMessage_NullPushName_SimpleForm() [TestMethod] public void TestBalancingGroupErrorMessage_NullPushName_SimpleForm() TestBalancingGroupErrorMessage_NullPushName_TwoNameForm() [TestMethod] public void TestBalancingGroupErrorMessage_NullPushName_TwoNameForm() TestBalancingGroupFunctionalMatching_BasicPatterns() [TestMethod] public void TestBalancingGroupFunctionalMatching_BasicPatterns() TestBalancingGroupFunctionalMatching_NestedParentheses() [TestMethod] public void TestBalancingGroupFunctionalMatching_NestedParentheses() TestBalancingGroupInAlternation() [TestMethod] public void TestBalancingGroupInAlternation() TestBalancingGroupInGroup_Nesting() [TestMethod] public void TestBalancingGroupInGroup_Nesting() TestBalancingGroupInNonCapturingGroup() [TestMethod] public void TestBalancingGroupInNonCapturingGroup() TestBalancingGroupIntegration_NestedInGroup() [TestMethod] public void TestBalancingGroupIntegration_NestedInGroup() TestBalancingGroupIntegration_WithConcatenation() [TestMethod] public void TestBalancingGroupIntegration_WithConcatenation() TestBalancingGroupIntegration_WithQuantifier() [TestMethod] public void TestBalancingGroupIntegration_WithQuantifier() TestBalancingGroupIsSimpleBalancing_Consistency() [TestMethod] public void TestBalancingGroupIsSimpleBalancing_Consistency() TestBalancingGroupMultipleInConcatenation() [TestMethod] public void TestBalancingGroupMultipleInConcatenation() TestBalancingGroupNullInnerExpressionThrows() [TestMethod] public void TestBalancingGroupNullInnerExpressionThrows() TestBalancingGroupPracticalExample_BalancedParentheses() [TestMethod] public void TestBalancingGroupPracticalExample_BalancedParentheses() TestBalancingGroupPracticalExample_CodeBlocks() [TestMethod] public void TestBalancingGroupPracticalExample_CodeBlocks() TestBalancingGroupPracticalExample_XMLTags() [TestMethod] public void TestBalancingGroupPracticalExample_XMLTags() TestBalancingGroupProperties() [TestMethod] public void TestBalancingGroupProperties() TestBalancingGroupPropertyMutation() [TestMethod] public void TestBalancingGroupPropertyMutation() TestBalancingGroupQuantifierChaining() [TestMethod] public void TestBalancingGroupQuantifierChaining() TestBalancingGroupRendering_SimpleForm_AllQuantifiers() [TestMethod] public void TestBalancingGroupRendering_SimpleForm_AllQuantifiers() TestBalancingGroupRendering_TwoNameForm_AllQuantifiers() [TestMethod] public void TestBalancingGroupRendering_TwoNameForm_AllQuantifiers() TestBalancingGroupValidation() [TestMethod] public void TestBalancingGroupValidation() TestBalancingGroupWithAlternation() [TestMethod] public void TestBalancingGroupWithAlternation() TestBalancingGroupWithAtLeastQuantifier() [TestMethod] public void TestBalancingGroupWithAtLeastQuantifier() TestBalancingGroupWithCharacterClass() [TestMethod] public void TestBalancingGroupWithCharacterClass() TestBalancingGroupWithCharacterRange() [TestMethod] public void TestBalancingGroupWithCharacterRange() TestBalancingGroupWithConcatenationInnerExpr() [TestMethod] public void TestBalancingGroupWithConcatenationInnerExpr() TestBalancingGroupWithExactlyQuantifier() [TestMethod] public void TestBalancingGroupWithExactlyQuantifier() TestBalancingGroupWithLookaroundExpression() [TestMethod] public void TestBalancingGroupWithLookaroundExpression() TestBalancingGroupWithNestedBalancingGroups() [TestMethod] public void TestBalancingGroupWithNestedBalancingGroups() TestBalancingGroupWithQuantifiers() [TestMethod] public void TestBalancingGroupWithQuantifiers() TestCharacterRangeNodeRendering() [TestMethod] public void TestCharacterRangeNodeRendering() TestCharacterSetNodeRendering() [TestMethod] public void TestCharacterSetNodeRendering() TestCommentNodeRendering() [TestMethod] public void TestCommentNodeRendering() TestConcatenationNodeRendering() [TestMethod] public void TestConcatenationNodeRendering() TestConditionalMatchNodeRendering() [TestMethod] public void TestConditionalMatchNodeRendering() TestEscapingLiteralNodeRendering() [TestMethod] public void TestEscapingLiteralNodeRendering() TestGroupApostropheSyntaxBackreference() [TestMethod] public void TestGroupApostropheSyntaxBackreference() TestGroupApostropheSyntaxMatching() [TestMethod] public void TestGroupApostropheSyntaxMatching() TestGroupApostropheSyntaxRendering() [TestMethod] public void TestGroupApostropheSyntaxRendering() TestGroupNodeRendering() [TestMethod] public void TestGroupNodeRendering() TestGroupReferenceNodeRendering() [TestMethod] public void TestGroupReferenceNodeRendering() TestInlineOptionNodeRendering() [TestMethod] public void TestInlineOptionNodeRendering() TestLiteralNodeRendering() [TestMethod] public void TestLiteralNodeRendering() TestLookAroundNodeRendering() [TestMethod] public void TestLookAroundNodeRendering() TestUnicodeCategoryAllSubcategories() [TestMethod] public void TestUnicodeCategoryAllSubcategories() TestUnicodeCategoryErrorHandling() [TestMethod] public void TestUnicodeCategoryErrorHandling() TestUnicodeCategoryGettersAndEnumerators() [TestMethod] public void TestUnicodeCategoryGettersAndEnumerators() TestUnicodeCategoryIntegration() [TestMethod] public void TestUnicodeCategoryIntegration() TestUnicodeCategoryLazyQuantifiers() [TestMethod] public void TestUnicodeCategoryLazyQuantifiers() TestUnicodeCategoryMultipleNamedBlocks() [TestMethod] public void TestUnicodeCategoryMultipleNamedBlocks() TestUnicodeCategoryNodeRendering() [TestMethod] public void TestUnicodeCategoryNodeRendering() TestUnicodeCategoryRealWorldPatterns() [TestMethod] public void TestUnicodeCategoryRealWorldPatterns() TestUnicodeCategoryValidation() [TestMethod] public void TestUnicodeCategoryValidation() TestUnicodeCategoryWithLookaheadAndLookbehind() [TestMethod] public void TestUnicodeCategoryWithLookaheadAndLookbehind()"
  },
  "api/RegexBuilder.Tests.RegexNodeTests.html": {
    "href": "api/RegexBuilder.Tests.RegexNodeTests.html",
    "title": "Class RegexNodeTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexNodeTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class RegexNodeTests Inheritance object RegexNodeTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestAlternationNodeConstruction() [TestMethod] public void TestAlternationNodeConstruction() TestAlternationNodeNullExpressionListAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestAlternationNodeNullExpressionListAssignment1() TestAlternationNodeNullExpressionListAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestAlternationNodeNullExpressionListAssignment2() TestAlternationNodeNullExpressionListAssignment3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestAlternationNodeNullExpressionListAssignment3() TestBacktrackingSuppressionNodeNullExpressionAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestBacktrackingSuppressionNodeNullExpressionAssignment1() TestBacktrackingSuppressionNodeNullExpressionAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestBacktrackingSuppressionNodeNullExpressionAssignment2() TestCharacterSetNodeCharacterListExpressionProperty() [TestMethod] public void TestCharacterSetNodeCharacterListExpressionProperty() TestCharacterSetNodeNullAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestCharacterSetNodeNullAssignment1() TestCharacterSetNodeNullAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestCharacterSetNodeNullAssignment2() TestCharacterSetNodeNullAssignment3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestCharacterSetNodeNullAssignment3() TestConcatenationNodeConstruction() [TestMethod] public void TestConcatenationNodeConstruction() TestConcatenationNodeNullChildAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestConcatenationNodeNullChildAssignment1() TestConcatenationNodeNullChildAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestConcatenationNodeNullChildAssignment2() TestConditionalMatchNodeNullAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestConditionalMatchNodeNullAssignment1() TestConditionalMatchNodeNullAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestConditionalMatchNodeNullAssignment2() TestConditionalMatchNodeNullAssignment3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestConditionalMatchNodeNullAssignment3() TestGroupNodeNullAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestGroupNodeNullAssignment1() TestGroupNodeNullAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestGroupNodeNullAssignment2() TestInlineOptionNodeInvalidOptionAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionNodeInvalidOptionAssignment1() TestInlineOptionNodeInvalidOptionAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionNodeInvalidOptionAssignment2() TestInlineOptionNodeInvalidOptionAssignment3() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionNodeInvalidOptionAssignment3() TestInlineOptionNodeInvalidOptionAssignment4() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionNodeInvalidOptionAssignment4() TestInlineOptionNodeInvalidOptionAssignment5() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestInlineOptionNodeInvalidOptionAssignment5() TestInlineOptionNodeNullExpressionAssignment() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestInlineOptionNodeNullExpressionAssignment() TestInlineOptionNodeQuantifierAssignment() [TestMethod] [ExpectedException(typeof(InvalidOperationException))] public void TestInlineOptionNodeQuantifierAssignment() TestLookAroundNodeNullAssignment1() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestLookAroundNodeNullAssignment1() TestLookAroundNodeNullAssignment2() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestLookAroundNodeNullAssignment2() TestLookAroundNodeNullAssignment3() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void TestLookAroundNodeNullAssignment3() TestQuantifierSetterForNodesWithQuantifierAllowed() [TestMethod] public void TestQuantifierSetterForNodesWithQuantifierAllowed() TestQuantifierSetterForNodesWithQuantifierNotAllowed() [TestMethod] [ExpectedException(typeof(InvalidOperationException))] public void TestQuantifierSetterForNodesWithQuantifierNotAllowed() TestRegexNodeAdditionOperator1() [TestMethod] public void TestRegexNodeAdditionOperator1() TestRegexNodeAdditionOperator2() [TestMethod] public void TestRegexNodeAdditionOperator2() TestRegexNodeAdditionOperator3() [TestMethod] public void TestRegexNodeAdditionOperator3() TestRegexNodeAdditionOperator4() [TestMethod] public void TestRegexNodeAdditionOperator4() TestRegexNodeAdditionOperator5() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestRegexNodeAdditionOperator5() TestRegexNodeAdditionOperator6() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestRegexNodeAdditionOperator6() TestRegexNodeAdditionOperator7() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestRegexNodeAdditionOperator7()"
  },
  "api/RegexBuilder.Tests.RegexQuantifierRenderingTests.html": {
    "href": "api/RegexBuilder.Tests.RegexQuantifierRenderingTests.html",
    "title": "Class RegexQuantifierRenderingTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexQuantifierRenderingTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class RegexQuantifierRenderingTests Inheritance object RegexQuantifierRenderingTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestAtLeastRendering() [TestMethod] public void TestAtLeastRendering() TestCustomRendering() [TestMethod] public void TestCustomRendering() TestExactlyRendering() [TestMethod] public void TestExactlyRendering() TestOneOrMoreRendering() [TestMethod] public void TestOneOrMoreRendering() TestZeroOrMoreRendering() [TestMethod] public void TestZeroOrMoreRendering() TestZeroOrOneRendering() [TestMethod] public void TestZeroOrOneRendering()"
  },
  "api/RegexBuilder.Tests.RegexQuantifierTests.html": {
    "href": "api/RegexBuilder.Tests.RegexQuantifierTests.html",
    "title": "Class RegexQuantifierTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class RegexQuantifierTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll Summary description for UnitTest1 [TestClass] public class RegexQuantifierTests Inheritance object RegexQuantifierTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestContext Gets or sets the test context which provides information about and functionality for the current test run. public TestContext TestContext { get; set; } Property Value TestContext Methods TestAtLeastMethodShouldReturnProperObject() [TestMethod] public void TestAtLeastMethodShouldReturnProperObject() TestCustomMethodShouldReturnProperObject() [TestMethod] public void TestCustomMethodShouldReturnProperObject() TestExactlyMethodShouldReturnProperObject() [TestMethod] public void TestExactlyMethodShouldReturnProperObject() TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts1() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts1() TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts2() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts2() TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts3() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts3() TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts4() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinMaxOccurrenceCountPropertiesShouldNotAcceptNegativeInts4() TestMinOccurrenceCountPropertyShouldNotAcceptNulls1() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinOccurrenceCountPropertyShouldNotAcceptNulls1() TestMinOccurrenceCountPropertyShouldNotAcceptNulls2() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void TestMinOccurrenceCountPropertyShouldNotAcceptNulls2() TestNonePropertyShouldReturnNull() [TestMethod] public void TestNonePropertyShouldReturnNull() TestOneOrMorePropertyShouldReturnProperObject() [TestMethod] public void TestOneOrMorePropertyShouldReturnProperObject() TestZeroOrMorePropertyShouldReturnProperObject() [TestMethod] public void TestZeroOrMorePropertyShouldReturnProperObject() TestZeroOrOnePropertyShouldReturnProperObject() [TestMethod] public void TestZeroOrOnePropertyShouldReturnProperObject()"
  },
  "api/RegexBuilder.Tests.SubstitutionBuilderTests.html": {
    "href": "api/RegexBuilder.Tests.SubstitutionBuilderTests.html",
    "title": "Class SubstitutionBuilderTests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Class SubstitutionBuilderTests Namespace RegexBuilder.Tests Assembly RegexBuilder.Tests.dll [TestClass] public class SubstitutionBuilderTests Inheritance object SubstitutionBuilderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AfterMatch_RendersCorrectly() [TestMethod] public void AfterMatch_RendersCorrectly() BeforeMatch_RendersCorrectly() [TestMethod] public void BeforeMatch_RendersCorrectly() Build_EmptyArray_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Build_EmptyArray_ThrowsException() Build_MixedValidAndNullNodes_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Build_MixedValidAndNullNodes_ThrowsException() Build_MultipleNodes_RendersCorrectly() [TestMethod] public void Build_MultipleNodes_RendersCorrectly() Build_NullArray_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Build_NullArray_ThrowsException() Build_SingleNode_RendersCorrectly() [TestMethod] public void Build_SingleNode_RendersCorrectly() Build_SingleNullNode_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Build_SingleNullNode_ThrowsException() Concatenate_ArrayWithNullElement_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Concatenate_ArrayWithNullElement_ThrowsException() Concatenate_EmptyArray_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void Concatenate_EmptyArray_ThrowsException() Concatenate_MultipleNodes_RendersCorrectly() [TestMethod] public void Concatenate_MultipleNodes_RendersCorrectly() Concatenate_NullArray_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Concatenate_NullArray_ThrowsException() Concatenate_WithSpecialReferences_RendersCorrectly() [TestMethod] public void Concatenate_WithSpecialReferences_RendersCorrectly() EntireInput_RendersCorrectly() [TestMethod] public void EntireInput_RendersCorrectly() GroupName_ComplexName_RendersCorrectly() [TestMethod] public void GroupName_ComplexName_RendersCorrectly() GroupName_EmptyName_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void GroupName_EmptyName_ThrowsException() GroupName_NullName_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void GroupName_NullName_ThrowsException() GroupName_SimpleName_RendersCorrectly() [TestMethod] public void GroupName_SimpleName_RendersCorrectly() GroupName_WhitespaceName_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentException))] public void GroupName_WhitespaceName_ThrowsException() GroupNumber_MultipleDigits_RendersCorrectly() [TestMethod] public void GroupNumber_MultipleDigits_RendersCorrectly() GroupNumber_Negative_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentOutOfRangeException))] public void GroupNumber_Negative_ThrowsException() GroupNumber_SingleDigit_RendersCorrectly() [TestMethod] public void GroupNumber_SingleDigit_RendersCorrectly() GroupNumber_Zero_RendersCorrectly() [TestMethod] public void GroupNumber_Zero_RendersCorrectly() Integration_AfterMatch_ReplacesWithSuffix() [TestMethod] public void Integration_AfterMatch_ReplacesWithSuffix() Integration_BeforeMatch_ReplacesWithPrefix() [TestMethod] public void Integration_BeforeMatch_ReplacesWithPrefix() Integration_CombineAllSpecialReferences_WorksCorrectly() [TestMethod] public void Integration_CombineAllSpecialReferences_WorksCorrectly() Integration_ComplexPattern_RestructuresData() [TestMethod] public void Integration_ComplexPattern_RestructuresData() Integration_EntireInput_ReplacesWithWholeString() [TestMethod] public void Integration_EntireInput_ReplacesWithWholeString() Integration_EscapedDollarInLiteral_OutputsCorrectly() [TestMethod] public void Integration_EscapedDollarInLiteral_OutputsCorrectly() Integration_LastCapturedGroup_OutputsLastGroup() [TestMethod] public void Integration_LastCapturedGroup_OutputsLastGroup() Integration_LiteralDollar_InsertsMoneySymbol() [TestMethod] public void Integration_LiteralDollar_InsertsMoneySymbol() Integration_MultipleReplacements_AppliesAll() [TestMethod] public void Integration_MultipleReplacements_AppliesAll() Integration_NamedGroupSubstitution_FormatsPhoneNumber() [TestMethod] public void Integration_NamedGroupSubstitution_FormatsPhoneNumber() Integration_NamedGroupSubstitution_SwapsTwoWords() [TestMethod] public void Integration_NamedGroupSubstitution_SwapsTwoWords() Integration_NumberedGroupSubstitution_SwapsTwoWords() [TestMethod] public void Integration_NumberedGroupSubstitution_SwapsTwoWords() Integration_WholeMatch_DuplicatesMatch() [TestMethod] public void Integration_WholeMatch_DuplicatesMatch() Integration_WholeMatch_WrapsInBrackets() [TestMethod] public void Integration_WholeMatch_WrapsInBrackets() LastCapturedGroup_RendersCorrectly() [TestMethod] public void LastCapturedGroup_RendersCorrectly() LiteralDollar_RendersCorrectly() [TestMethod] public void LiteralDollar_RendersCorrectly() Literal_EmptyString_RendersEmptyPattern() [TestMethod] public void Literal_EmptyString_RendersEmptyPattern() Literal_MultipleDollarSigns_EscapesAll() [TestMethod] public void Literal_MultipleDollarSigns_EscapesAll() Literal_NullText_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void Literal_NullText_ThrowsException() Literal_SimpleText_RendersCorrectly() [TestMethod] public void Literal_SimpleText_RendersCorrectly() Literal_TextWithDollarSign_EscapesDollarSign() [TestMethod] public void Literal_TextWithDollarSign_EscapesDollarSign() SubstitutionConcatenation_IEnumerableConstructor_HappyPath() [TestMethod] public void SubstitutionConcatenation_IEnumerableConstructor_HappyPath() SubstitutionConcatenation_IEnumerableConstructor_NullArgument_ThrowsException() [TestMethod] [ExpectedException(typeof(ArgumentNullException))] public void SubstitutionConcatenation_IEnumerableConstructor_NullArgument_ThrowsException() WholeMatch_RendersCorrectly() [TestMethod] public void WholeMatch_RendersCorrectly()"
  },
  "api/RegexBuilder.Tests.html": {
    "href": "api/RegexBuilder.Tests.html",
    "title": "Namespace RegexBuilder.Tests | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Namespace RegexBuilder.Tests Classes CommonPatternsTests CustomRegexTests ExtensionMethodTests PatternBuilderTests RegexBuilderTests RegexNodeRenderingTests RegexNodeTests RegexQuantifierRenderingTests RegexQuantifierTests Summary description for UnitTest1 SubstitutionBuilderTests"
  },
  "api/RegexBuilder.html": {
    "href": "api/RegexBuilder.html",
    "title": "Namespace RegexBuilder | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Namespace RegexBuilder Classes CommonPatterns Provides factory methods for commonly used regex patterns. ExtensionMethods PatternBuilder Provides a fluent API for building complex regex patterns with method chaining. RegexBuilder RegexMetaChars RegexNode RegexNodeAlternation RegexNodeBacktrackingSuppression RegexNodeBalancingGroup RegexNodeCharacterRange RegexNodeCharacterSet RegexNodeComment RegexNodeConcatenation RegexNodeConditionalMatch RegexNodeEscapingLiteral RegexNodeGroup RegexNodeGroupReference RegexNodeInlineOption RegexNodeInlineOptionGrouping Represents an inline option grouping node with support for enabling and disabling options. Generates patterns like (?i:expr), (?im:expr), or (?i-m:expr). RegexNodeLiteral RegexNodeLookAround RegexNodeUnicodeCategory Represents a Unicode category escape sequence in a regular expression. Enables matching of Unicode letters, numbers, and other character categories. Supports both positive matching (\\p{name}) and negative matching (\\P{name}). RegexQuantifier RegexStringEscaper SubstitutionBuilder Factory class for creating substitution/replacement pattern nodes. Use these methods to build replacement patterns for Regex.Replace() operations. SubstitutionConcatenation Represents a concatenation of multiple substitution nodes. SubstitutionGroupReference Represents a substitution that references a captured group by number or name. SubstitutionLiteral Represents a literal text substitution node. Dollar signs ($) are automatically escaped. SubstitutionNode Represents a substitution/replacement pattern node that can be used in regex replacement operations. This is the base class for all substitution pattern nodes. SubstitutionSpecialReference Represents a special substitution reference (like $&, $`, $', $+, $_, $$). Enums RegexLookAround SubstitutionType Defines the types of special substitution references."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | RegexBuilder.NET9 - Fluent Regex Builder",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}